// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Msg_Register_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Register_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Register_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Register_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Login_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Login_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Login_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Login_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_CreateRoom_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_CreateRoom_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_CreateRoom_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_CreateRoom_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_EnterRoom_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_EnterRoom_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_EnterRoom_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_EnterRoom_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ChangeState_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ChangeState_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ChangeState_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ChangeState_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Expel_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Expel_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Expel_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Expel_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_StartGame_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_StartGame_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_StartGame_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_StartGame_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ExitRoom_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ExitRoom_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ExitRoom_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ExitRoom_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GetRoomMen_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GetRoomMen_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GetRoomMen_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GetRoomMen_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_FANGJIANLT_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_FANGJIANLT_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_FANGJIANLT_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_FANGJIANLT_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_VEC_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_VEC_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_VEC_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_VEC_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_PICKSIDE_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_PICKSIDE_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_PICKSIDE_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_PICKSIDE_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_AMMO_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_AMMO_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_AMMO_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_AMMO_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_DAMAGE_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_DAMAGE_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_DAMAGE_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_DAMAGE_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GETITEM_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GETITEM_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_DEATH_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_DEATH_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_POINTTAKING_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_POINTTAKING_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_POINTTAKEN_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_POINTTAKEN_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ADDSCORES_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ADDSCORES_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ENDGAME_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ENDGAME_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_POINTDESPUTE_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_POINTDESPUTE_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ROOMINFO_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ROOMINFO_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ROOMLIST_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ROOMLIST_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ROOMINFOREQUEST_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ROOMINFOREQUEST_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_USERINFO_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_USERINFO_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_USERINFOLISTOS_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_USERINFOLISTOS_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_VECOS_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_VECOS_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_VECOSLIST_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_VECOSLIST_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_INFOAC_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_INFOAC_C2S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Msg_2eproto() {
  protobuf_AddDesc_Msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Msg.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_Register_C2S_descriptor_ = file->message_type(0);
  static const int Msg_Register_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_C2S, szpassword_),
  };
  Msg_Register_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Register_C2S_descriptor_,
      Msg_Register_C2S::default_instance_,
      Msg_Register_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Register_C2S));
  Msg_Register_S2C_descriptor_ = file->message_type(1);
  static const int Msg_Register_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_S2C, result_),
  };
  Msg_Register_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Register_S2C_descriptor_,
      Msg_Register_S2C::default_instance_,
      Msg_Register_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Register_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Register_S2C));
  Msg_Login_C2S_descriptor_ = file->message_type(2);
  static const int Msg_Login_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, szpassword_),
  };
  Msg_Login_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Login_C2S_descriptor_,
      Msg_Login_C2S::default_instance_,
      Msg_Login_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Login_C2S));
  Msg_Login_S2C_descriptor_ = file->message_type(3);
  static const int Msg_Login_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, id_),
  };
  Msg_Login_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Login_S2C_descriptor_,
      Msg_Login_S2C::default_instance_,
      Msg_Login_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Login_S2C));
  Msg_CreateRoom_C2S_descriptor_ = file->message_type(4);
  static const int Msg_CreateRoom_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_C2S, id_),
  };
  Msg_CreateRoom_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_CreateRoom_C2S_descriptor_,
      Msg_CreateRoom_C2S::default_instance_,
      Msg_CreateRoom_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_CreateRoom_C2S));
  Msg_CreateRoom_S2C_descriptor_ = file->message_type(5);
  static const int Msg_CreateRoom_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_S2C, result_),
  };
  Msg_CreateRoom_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_CreateRoom_S2C_descriptor_,
      Msg_CreateRoom_S2C::default_instance_,
      Msg_CreateRoom_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_CreateRoom_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_CreateRoom_S2C));
  Msg_EnterRoom_C2S_descriptor_ = file->message_type(6);
  static const int Msg_EnterRoom_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_C2S, id_),
  };
  Msg_EnterRoom_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_EnterRoom_C2S_descriptor_,
      Msg_EnterRoom_C2S::default_instance_,
      Msg_EnterRoom_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_EnterRoom_C2S));
  Msg_EnterRoom_S2C_descriptor_ = file->message_type(7);
  static const int Msg_EnterRoom_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_S2C, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_S2C, szname_),
  };
  Msg_EnterRoom_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_EnterRoom_S2C_descriptor_,
      Msg_EnterRoom_S2C::default_instance_,
      Msg_EnterRoom_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_EnterRoom_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_EnterRoom_S2C));
  Msg_ChangeState_C2S_descriptor_ = file->message_type(8);
  static const int Msg_ChangeState_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, number1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, number2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, ready_),
  };
  Msg_ChangeState_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ChangeState_C2S_descriptor_,
      Msg_ChangeState_C2S::default_instance_,
      Msg_ChangeState_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ChangeState_C2S));
  Msg_ChangeState_S2C_descriptor_ = file->message_type(9);
  static const int Msg_ChangeState_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, number1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, number2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, ready_),
  };
  Msg_ChangeState_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ChangeState_S2C_descriptor_,
      Msg_ChangeState_S2C::default_instance_,
      Msg_ChangeState_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ChangeState_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ChangeState_S2C));
  Msg_Expel_C2S_descriptor_ = file->message_type(10);
  static const int Msg_Expel_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_C2S, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_C2S, userid_),
  };
  Msg_Expel_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Expel_C2S_descriptor_,
      Msg_Expel_C2S::default_instance_,
      Msg_Expel_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Expel_C2S));
  Msg_Expel_S2C_descriptor_ = file->message_type(11);
  static const int Msg_Expel_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_S2C, number_),
  };
  Msg_Expel_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Expel_S2C_descriptor_,
      Msg_Expel_S2C::default_instance_,
      Msg_Expel_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Expel_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Expel_S2C));
  Msg_StartGame_C2S_descriptor_ = file->message_type(12);
  static const int Msg_StartGame_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_C2S, id_),
  };
  Msg_StartGame_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_StartGame_C2S_descriptor_,
      Msg_StartGame_C2S::default_instance_,
      Msg_StartGame_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_StartGame_C2S));
  Msg_StartGame_S2C_descriptor_ = file->message_type(13);
  static const int Msg_StartGame_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_S2C, result_),
  };
  Msg_StartGame_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_StartGame_S2C_descriptor_,
      Msg_StartGame_S2C::default_instance_,
      Msg_StartGame_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartGame_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_StartGame_S2C));
  Msg_ExitRoom_C2S_descriptor_ = file->message_type(14);
  static const int Msg_ExitRoom_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_C2S, number_),
  };
  Msg_ExitRoom_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ExitRoom_C2S_descriptor_,
      Msg_ExitRoom_C2S::default_instance_,
      Msg_ExitRoom_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ExitRoom_C2S));
  Msg_ExitRoom_S2C_descriptor_ = file->message_type(15);
  static const int Msg_ExitRoom_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_S2C, number_),
  };
  Msg_ExitRoom_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ExitRoom_S2C_descriptor_,
      Msg_ExitRoom_S2C::default_instance_,
      Msg_ExitRoom_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ExitRoom_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ExitRoom_S2C));
  Msg_GetRoomMen_C2S_descriptor_ = file->message_type(16);
  static const int Msg_GetRoomMen_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_C2S, id_),
  };
  Msg_GetRoomMen_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GetRoomMen_C2S_descriptor_,
      Msg_GetRoomMen_C2S::default_instance_,
      Msg_GetRoomMen_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GetRoomMen_C2S));
  Msg_GetRoomMen_S2C_descriptor_ = file->message_type(17);
  static const int Msg_GetRoomMen_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, tanktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, ready_),
  };
  Msg_GetRoomMen_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GetRoomMen_S2C_descriptor_,
      Msg_GetRoomMen_S2C::default_instance_,
      Msg_GetRoomMen_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GetRoomMen_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GetRoomMen_S2C));
  Msg_FANGJIANLT_C2S_descriptor_ = file->message_type(18);
  static const int Msg_FANGJIANLT_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_C2S, szcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_C2S, houseid_),
  };
  Msg_FANGJIANLT_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_FANGJIANLT_C2S_descriptor_,
      Msg_FANGJIANLT_C2S::default_instance_,
      Msg_FANGJIANLT_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_FANGJIANLT_C2S));
  Msg_FANGJIANLT_S2C_descriptor_ = file->message_type(19);
  static const int Msg_FANGJIANLT_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_S2C, szcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_S2C, szname_),
  };
  Msg_FANGJIANLT_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_FANGJIANLT_S2C_descriptor_,
      Msg_FANGJIANLT_S2C::default_instance_,
      Msg_FANGJIANLT_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_FANGJIANLT_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_FANGJIANLT_S2C));
  Msg_VEC_C2S_descriptor_ = file->message_type(20);
  static const int Msg_VEC_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, ingrass_),
  };
  Msg_VEC_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_VEC_C2S_descriptor_,
      Msg_VEC_C2S::default_instance_,
      Msg_VEC_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_VEC_C2S));
  Msg_VEC_S2C_descriptor_ = file->message_type(21);
  static const int Msg_VEC_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, hide_),
  };
  Msg_VEC_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_VEC_S2C_descriptor_,
      Msg_VEC_S2C::default_instance_,
      Msg_VEC_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_VEC_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_VEC_S2C));
  Msg_PICKSIDE_C2S_descriptor_ = file->message_type(22);
  static const int Msg_PICKSIDE_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_C2S, side_),
  };
  Msg_PICKSIDE_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_PICKSIDE_C2S_descriptor_,
      Msg_PICKSIDE_C2S::default_instance_,
      Msg_PICKSIDE_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_PICKSIDE_C2S));
  Msg_PICKSIDE_S2C_descriptor_ = file->message_type(23);
  static const int Msg_PICKSIDE_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_S2C, result_),
  };
  Msg_PICKSIDE_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_PICKSIDE_S2C_descriptor_,
      Msg_PICKSIDE_S2C::default_instance_,
      Msg_PICKSIDE_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PICKSIDE_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_PICKSIDE_S2C));
  Msg_AMMO_C2S_descriptor_ = file->message_type(24);
  static const int Msg_AMMO_C2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, id_shooter_),
  };
  Msg_AMMO_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_AMMO_C2S_descriptor_,
      Msg_AMMO_C2S::default_instance_,
      Msg_AMMO_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_AMMO_C2S));
  Msg_AMMO_S2C_descriptor_ = file->message_type(25);
  static const int Msg_AMMO_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, id_),
  };
  Msg_AMMO_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_AMMO_S2C_descriptor_,
      Msg_AMMO_S2C::default_instance_,
      Msg_AMMO_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AMMO_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_AMMO_S2C));
  Msg_DAMAGE_C2S_descriptor_ = file->message_type(26);
  static const int Msg_DAMAGE_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_C2S, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_C2S, id_hurt_),
  };
  Msg_DAMAGE_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_DAMAGE_C2S_descriptor_,
      Msg_DAMAGE_C2S::default_instance_,
      Msg_DAMAGE_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_DAMAGE_C2S));
  Msg_DAMAGE_S2C_descriptor_ = file->message_type(27);
  static const int Msg_DAMAGE_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_S2C, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_S2C, id_),
  };
  Msg_DAMAGE_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_DAMAGE_S2C_descriptor_,
      Msg_DAMAGE_S2C::default_instance_,
      Msg_DAMAGE_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DAMAGE_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_DAMAGE_S2C));
  Msg_GETITEM_S2C_descriptor_ = file->message_type(28);
  static const int Msg_GETITEM_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GETITEM_S2C, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GETITEM_S2C, result_),
  };
  Msg_GETITEM_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GETITEM_S2C_descriptor_,
      Msg_GETITEM_S2C::default_instance_,
      Msg_GETITEM_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GETITEM_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GETITEM_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GETITEM_S2C));
  Msg_DEATH_S2C_descriptor_ = file->message_type(29);
  static const int Msg_DEATH_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DEATH_S2C, id_),
  };
  Msg_DEATH_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_DEATH_S2C_descriptor_,
      Msg_DEATH_S2C::default_instance_,
      Msg_DEATH_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DEATH_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_DEATH_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_DEATH_S2C));
  Msg_POINTTAKING_S2C_descriptor_ = file->message_type(30);
  static const int Msg_POINTTAKING_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKING_S2C, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKING_S2C, percent_),
  };
  Msg_POINTTAKING_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_POINTTAKING_S2C_descriptor_,
      Msg_POINTTAKING_S2C::default_instance_,
      Msg_POINTTAKING_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKING_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKING_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_POINTTAKING_S2C));
  Msg_POINTTAKEN_S2C_descriptor_ = file->message_type(31);
  static const int Msg_POINTTAKEN_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKEN_S2C, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKEN_S2C, pointnumber_),
  };
  Msg_POINTTAKEN_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_POINTTAKEN_S2C_descriptor_,
      Msg_POINTTAKEN_S2C::default_instance_,
      Msg_POINTTAKEN_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKEN_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTTAKEN_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_POINTTAKEN_S2C));
  Msg_ADDSCORES_S2C_descriptor_ = file->message_type(32);
  static const int Msg_ADDSCORES_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ADDSCORES_S2C, socres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ADDSCORES_S2C, id_),
  };
  Msg_ADDSCORES_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ADDSCORES_S2C_descriptor_,
      Msg_ADDSCORES_S2C::default_instance_,
      Msg_ADDSCORES_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ADDSCORES_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ADDSCORES_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ADDSCORES_S2C));
  Msg_ENDGAME_S2C_descriptor_ = file->message_type(33);
  static const int Msg_ENDGAME_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ENDGAME_S2C, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ENDGAME_S2C, team_),
  };
  Msg_ENDGAME_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ENDGAME_S2C_descriptor_,
      Msg_ENDGAME_S2C::default_instance_,
      Msg_ENDGAME_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ENDGAME_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ENDGAME_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ENDGAME_S2C));
  Msg_POINTDESPUTE_S2C_descriptor_ = file->message_type(34);
  static const int Msg_POINTDESPUTE_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTDESPUTE_S2C, result_),
  };
  Msg_POINTDESPUTE_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_POINTDESPUTE_S2C_descriptor_,
      Msg_POINTDESPUTE_S2C::default_instance_,
      Msg_POINTDESPUTE_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTDESPUTE_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_POINTDESPUTE_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_POINTDESPUTE_S2C));
  Msg_ROOMINFO_S2C_descriptor_ = file->message_type(35);
  static const int Msg_ROOMINFO_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFO_S2C, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFO_S2C, masterusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFO_S2C, roomid_),
  };
  Msg_ROOMINFO_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ROOMINFO_S2C_descriptor_,
      Msg_ROOMINFO_S2C::default_instance_,
      Msg_ROOMINFO_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFO_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFO_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ROOMINFO_S2C));
  Msg_ROOMLIST_S2C_descriptor_ = file->message_type(36);
  static const int Msg_ROOMLIST_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMLIST_S2C, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMLIST_S2C, result_),
  };
  Msg_ROOMLIST_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ROOMLIST_S2C_descriptor_,
      Msg_ROOMLIST_S2C::default_instance_,
      Msg_ROOMLIST_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMLIST_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMLIST_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ROOMLIST_S2C));
  Msg_ROOMINFOREQUEST_C2S_descriptor_ = file->message_type(37);
  static const int Msg_ROOMINFOREQUEST_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFOREQUEST_C2S, id_),
  };
  Msg_ROOMINFOREQUEST_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ROOMINFOREQUEST_C2S_descriptor_,
      Msg_ROOMINFOREQUEST_C2S::default_instance_,
      Msg_ROOMINFOREQUEST_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFOREQUEST_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ROOMINFOREQUEST_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ROOMINFOREQUEST_C2S));
  Msg_USERINFO_S2C_descriptor_ = file->message_type(38);
  static const int Msg_USERINFO_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, team_),
  };
  Msg_USERINFO_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_USERINFO_S2C_descriptor_,
      Msg_USERINFO_S2C::default_instance_,
      Msg_USERINFO_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_USERINFO_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_USERINFO_S2C));
  MSG_USERINFOLISTOS_S2C_descriptor_ = file->message_type(39);
  static const int MSG_USERINFOLISTOS_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_USERINFOLISTOS_S2C, userinfo_),
  };
  MSG_USERINFOLISTOS_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_USERINFOLISTOS_S2C_descriptor_,
      MSG_USERINFOLISTOS_S2C::default_instance_,
      MSG_USERINFOLISTOS_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_USERINFOLISTOS_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_USERINFOLISTOS_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_USERINFOLISTOS_S2C));
  MSG_VECOS_S2C_descriptor_ = file->message_type(40);
  static const int MSG_VECOS_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, ingrass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, id_),
  };
  MSG_VECOS_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_VECOS_S2C_descriptor_,
      MSG_VECOS_S2C::default_instance_,
      MSG_VECOS_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOS_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_VECOS_S2C));
  MSG_VECOSLIST_S2C_descriptor_ = file->message_type(41);
  static const int MSG_VECOSLIST_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOSLIST_S2C, vec_),
  };
  MSG_VECOSLIST_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_VECOSLIST_S2C_descriptor_,
      MSG_VECOSLIST_S2C::default_instance_,
      MSG_VECOSLIST_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOSLIST_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_VECOSLIST_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_VECOSLIST_S2C));
  MSG_INFOAC_C2S_descriptor_ = file->message_type(42);
  static const int MSG_INFOAC_C2S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_INFOAC_C2S, result_),
  };
  MSG_INFOAC_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_INFOAC_C2S_descriptor_,
      MSG_INFOAC_C2S::default_instance_,
      MSG_INFOAC_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_INFOAC_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_INFOAC_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_INFOAC_C2S));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Register_C2S_descriptor_, &Msg_Register_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Register_S2C_descriptor_, &Msg_Register_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Login_C2S_descriptor_, &Msg_Login_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Login_S2C_descriptor_, &Msg_Login_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_CreateRoom_C2S_descriptor_, &Msg_CreateRoom_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_CreateRoom_S2C_descriptor_, &Msg_CreateRoom_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_EnterRoom_C2S_descriptor_, &Msg_EnterRoom_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_EnterRoom_S2C_descriptor_, &Msg_EnterRoom_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ChangeState_C2S_descriptor_, &Msg_ChangeState_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ChangeState_S2C_descriptor_, &Msg_ChangeState_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Expel_C2S_descriptor_, &Msg_Expel_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Expel_S2C_descriptor_, &Msg_Expel_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_StartGame_C2S_descriptor_, &Msg_StartGame_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_StartGame_S2C_descriptor_, &Msg_StartGame_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ExitRoom_C2S_descriptor_, &Msg_ExitRoom_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ExitRoom_S2C_descriptor_, &Msg_ExitRoom_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GetRoomMen_C2S_descriptor_, &Msg_GetRoomMen_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GetRoomMen_S2C_descriptor_, &Msg_GetRoomMen_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_FANGJIANLT_C2S_descriptor_, &Msg_FANGJIANLT_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_FANGJIANLT_S2C_descriptor_, &Msg_FANGJIANLT_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_VEC_C2S_descriptor_, &Msg_VEC_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_VEC_S2C_descriptor_, &Msg_VEC_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_PICKSIDE_C2S_descriptor_, &Msg_PICKSIDE_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_PICKSIDE_S2C_descriptor_, &Msg_PICKSIDE_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_AMMO_C2S_descriptor_, &Msg_AMMO_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_AMMO_S2C_descriptor_, &Msg_AMMO_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_DAMAGE_C2S_descriptor_, &Msg_DAMAGE_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_DAMAGE_S2C_descriptor_, &Msg_DAMAGE_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GETITEM_S2C_descriptor_, &Msg_GETITEM_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_DEATH_S2C_descriptor_, &Msg_DEATH_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_POINTTAKING_S2C_descriptor_, &Msg_POINTTAKING_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_POINTTAKEN_S2C_descriptor_, &Msg_POINTTAKEN_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ADDSCORES_S2C_descriptor_, &Msg_ADDSCORES_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ENDGAME_S2C_descriptor_, &Msg_ENDGAME_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_POINTDESPUTE_S2C_descriptor_, &Msg_POINTDESPUTE_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ROOMINFO_S2C_descriptor_, &Msg_ROOMINFO_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ROOMLIST_S2C_descriptor_, &Msg_ROOMLIST_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ROOMINFOREQUEST_C2S_descriptor_, &Msg_ROOMINFOREQUEST_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_USERINFO_S2C_descriptor_, &Msg_USERINFO_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_USERINFOLISTOS_S2C_descriptor_, &MSG_USERINFOLISTOS_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_VECOS_S2C_descriptor_, &MSG_VECOS_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_VECOSLIST_S2C_descriptor_, &MSG_VECOSLIST_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_INFOAC_C2S_descriptor_, &MSG_INFOAC_C2S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Msg_2eproto() {
  delete Msg_Register_C2S::default_instance_;
  delete Msg_Register_C2S_reflection_;
  delete Msg_Register_S2C::default_instance_;
  delete Msg_Register_S2C_reflection_;
  delete Msg_Login_C2S::default_instance_;
  delete Msg_Login_C2S_reflection_;
  delete Msg_Login_S2C::default_instance_;
  delete Msg_Login_S2C_reflection_;
  delete Msg_CreateRoom_C2S::default_instance_;
  delete Msg_CreateRoom_C2S_reflection_;
  delete Msg_CreateRoom_S2C::default_instance_;
  delete Msg_CreateRoom_S2C_reflection_;
  delete Msg_EnterRoom_C2S::default_instance_;
  delete Msg_EnterRoom_C2S_reflection_;
  delete Msg_EnterRoom_S2C::default_instance_;
  delete Msg_EnterRoom_S2C_reflection_;
  delete Msg_ChangeState_C2S::default_instance_;
  delete Msg_ChangeState_C2S_reflection_;
  delete Msg_ChangeState_S2C::default_instance_;
  delete Msg_ChangeState_S2C_reflection_;
  delete Msg_Expel_C2S::default_instance_;
  delete Msg_Expel_C2S_reflection_;
  delete Msg_Expel_S2C::default_instance_;
  delete Msg_Expel_S2C_reflection_;
  delete Msg_StartGame_C2S::default_instance_;
  delete Msg_StartGame_C2S_reflection_;
  delete Msg_StartGame_S2C::default_instance_;
  delete Msg_StartGame_S2C_reflection_;
  delete Msg_ExitRoom_C2S::default_instance_;
  delete Msg_ExitRoom_C2S_reflection_;
  delete Msg_ExitRoom_S2C::default_instance_;
  delete Msg_ExitRoom_S2C_reflection_;
  delete Msg_GetRoomMen_C2S::default_instance_;
  delete Msg_GetRoomMen_C2S_reflection_;
  delete Msg_GetRoomMen_S2C::default_instance_;
  delete Msg_GetRoomMen_S2C_reflection_;
  delete Msg_FANGJIANLT_C2S::default_instance_;
  delete Msg_FANGJIANLT_C2S_reflection_;
  delete Msg_FANGJIANLT_S2C::default_instance_;
  delete Msg_FANGJIANLT_S2C_reflection_;
  delete Msg_VEC_C2S::default_instance_;
  delete Msg_VEC_C2S_reflection_;
  delete Msg_VEC_S2C::default_instance_;
  delete Msg_VEC_S2C_reflection_;
  delete Msg_PICKSIDE_C2S::default_instance_;
  delete Msg_PICKSIDE_C2S_reflection_;
  delete Msg_PICKSIDE_S2C::default_instance_;
  delete Msg_PICKSIDE_S2C_reflection_;
  delete Msg_AMMO_C2S::default_instance_;
  delete Msg_AMMO_C2S_reflection_;
  delete Msg_AMMO_S2C::default_instance_;
  delete Msg_AMMO_S2C_reflection_;
  delete Msg_DAMAGE_C2S::default_instance_;
  delete Msg_DAMAGE_C2S_reflection_;
  delete Msg_DAMAGE_S2C::default_instance_;
  delete Msg_DAMAGE_S2C_reflection_;
  delete Msg_GETITEM_S2C::default_instance_;
  delete Msg_GETITEM_S2C_reflection_;
  delete Msg_DEATH_S2C::default_instance_;
  delete Msg_DEATH_S2C_reflection_;
  delete Msg_POINTTAKING_S2C::default_instance_;
  delete Msg_POINTTAKING_S2C_reflection_;
  delete Msg_POINTTAKEN_S2C::default_instance_;
  delete Msg_POINTTAKEN_S2C_reflection_;
  delete Msg_ADDSCORES_S2C::default_instance_;
  delete Msg_ADDSCORES_S2C_reflection_;
  delete Msg_ENDGAME_S2C::default_instance_;
  delete Msg_ENDGAME_S2C_reflection_;
  delete Msg_POINTDESPUTE_S2C::default_instance_;
  delete Msg_POINTDESPUTE_S2C_reflection_;
  delete Msg_ROOMINFO_S2C::default_instance_;
  delete Msg_ROOMINFO_S2C_reflection_;
  delete Msg_ROOMLIST_S2C::default_instance_;
  delete Msg_ROOMLIST_S2C_reflection_;
  delete Msg_ROOMINFOREQUEST_C2S::default_instance_;
  delete Msg_ROOMINFOREQUEST_C2S_reflection_;
  delete Msg_USERINFO_S2C::default_instance_;
  delete Msg_USERINFO_S2C_reflection_;
  delete MSG_USERINFOLISTOS_S2C::default_instance_;
  delete MSG_USERINFOLISTOS_S2C_reflection_;
  delete MSG_VECOS_S2C::default_instance_;
  delete MSG_VECOS_S2C_reflection_;
  delete MSG_VECOSLIST_S2C::default_instance_;
  delete MSG_VECOSLIST_S2C_reflection_;
  delete MSG_INFOAC_C2S::default_instance_;
  delete MSG_INFOAC_C2S_reflection_;
}

void protobuf_AddDesc_Msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMsg.proto\"6\n\020Msg_Register_C2S\022\016\n\006szNam"
    "e\030\001 \002(\014\022\022\n\nszPassword\030\002 \002(\014\"\"\n\020Msg_Regis"
    "ter_S2C\022\016\n\006result\030\001 \002(\005\"3\n\rMsg_Login_C2S"
    "\022\016\n\006szName\030\001 \002(\014\022\022\n\nszPassword\030\002 \002(\014\"+\n\r"
    "Msg_Login_S2C\022\016\n\006result\030\001 \002(\005\022\n\n\002id\030\002 \001("
    "\005\" \n\022Msg_CreateRoom_C2S\022\n\n\002id\030\001 \002(\005\"$\n\022M"
    "sg_CreateRoom_S2C\022\016\n\006result\030\001 \002(\005\"\037\n\021Msg"
    "_EnterRoom_C2S\022\n\n\002id\030\001 \002(\005\"C\n\021Msg_EnterR"
    "oom_S2C\022\016\n\006result\030\001 \002(\005\022\016\n\006number\030\002 \001(\005\022"
    "\016\n\006szName\030\003 \001(\014\"T\n\023Msg_ChangeState_C2S\022\017"
    "\n\007number1\030\002 \001(\005\022\017\n\007number2\030\003 \001(\005\022\014\n\004type"
    "\030\004 \001(\005\022\r\n\005ready\030\005 \001(\005\"d\n\023Msg_ChangeState"
    "_S2C\022\016\n\006result\030\001 \002(\005\022\017\n\007number1\030\002 \001(\005\022\017\n"
    "\007number2\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\r\n\005ready\030\005 "
    "\001(\005\";\n\rMsg_Expel_C2S\022\016\n\006number\030\001 \002(\005\022\n\n\002"
    "id\030\002 \002(\005\022\016\n\006userid\030\003 \002(\005\"/\n\rMsg_Expel_S2"
    "C\022\016\n\006result\030\001 \002(\005\022\016\n\006number\030\002 \001(\005\"\037\n\021Msg"
    "_StartGame_C2S\022\n\n\002id\030\001 \002(\005\"#\n\021Msg_StartG"
    "ame_S2C\022\016\n\006result\030\001 \002(\005\".\n\020Msg_ExitRoom_"
    "C2S\022\n\n\002id\030\001 \002(\005\022\016\n\006number\030\002 \002(\005\"2\n\020Msg_E"
    "xitRoom_S2C\022\016\n\006result\030\001 \002(\005\022\016\n\006number\030\002 "
    "\001(\005\" \n\022Msg_GetRoomMen_C2S\022\n\n\002id\030\001 \002(\005\"e\n"
    "\022Msg_GetRoomMen_S2C\022\016\n\006result\030\001 \002(\005\022\016\n\006n"
    "umber\030\002 \003(\005\022\016\n\006szName\030\003 \003(\014\022\020\n\010tankType\030"
    "\004 \003(\005\022\r\n\005ready\030\005 \003(\005\"H\n\022Msg_FANGJIANLT_C"
    "2S\022\021\n\tszContent\030\001 \002(\014\022\016\n\006szName\030\002 \002(\014\022\017\n"
    "\007houseid\030\003 \002(\005\"G\n\022Msg_FANGJIANLT_S2C\022\016\n\006"
    "result\030\001 \002(\005\022\021\n\tszContent\030\002 \001(\014\022\016\n\006szNam"
    "e\030\003 \001(\014\"G\n\013Msg_VEC_C2S\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002"
    " \002(\002\022\021\n\tdirection\030\003 \002(\005\022\017\n\007ingrass\030\004 \002(\005"
    "\"P\n\013Msg_VEC_S2C\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\021\n"
    "\tdirection\030\003 \002(\005\022\n\n\002id\030\004 \002(\005\022\014\n\004hide\030\005 \002"
    "(\005\" \n\020Msg_PICKSIDE_C2S\022\014\n\004side\030\001 \002(\005\"\"\n\020"
    "Msg_PICKSIDE_S2C\022\016\n\006result\030\001 \002(\005\"Y\n\014Msg_"
    "AMMO_C2S\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\021\n\tdirect"
    "ion\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\022\022\n\nid_shooter\030\005 "
    "\002(\005\"Q\n\014Msg_AMMO_S2C\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002("
    "\002\022\021\n\tdirection\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\022\n\n\002id"
    "\030\005 \002(\005\"1\n\016Msg_DAMAGE_C2S\022\016\n\006damage\030\001 \002(\005"
    "\022\017\n\007id_hurt\030\002 \002(\005\",\n\016Msg_DAMAGE_S2C\022\016\n\006d"
    "amage\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"/\n\017Msg_GETITEM_S"
    "2C\022\014\n\004kind\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\"\033\n\rMsg_"
    "DEATH_S2C\022\n\n\002id\030\001 \002(\005\"4\n\023Msg_POINTTAKING"
    "_S2C\022\014\n\004team\030\001 \002(\005\022\017\n\007percent\030\002 \002(\005\"7\n\022M"
    "sg_POINTTAKEN_S2C\022\014\n\004team\030\001 \002(\005\022\023\n\013point"
    "number\030\002 \002(\005\"/\n\021Msg_ADDSCORES_S2C\022\016\n\006soc"
    "res\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"/\n\017Msg_ENDGAME_S2C"
    "\022\016\n\006result\030\001 \002(\005\022\014\n\004team\030\002 \002(\005\"&\n\024Msg_PO"
    "INTDESPUTE_S2C\022\016\n\006result\030\001 \002(\005\"L\n\020Msg_RO"
    "OMINFO_S2C\022\020\n\010masterid\030\001 \002(\005\022\026\n\016masterus"
    "ername\030\002 \002(\014\022\016\n\006roomid\030\003 \002(\005\"C\n\020Msg_ROOM"
    "LIST_S2C\022\037\n\004room\030\001 \003(\0132\021.Msg_ROOMINFO_S2"
    "C\022\016\n\006result\030\002 \002(\005\"%\n\027Msg_ROOMINFOREQUEST"
    "_C2S\022\n\n\002id\030\001 \001(\005\"X\n\020Msg_USERINFO_S2C\022\n\n\002"
    "id\030\001 \002(\005\022\020\n\010username\030\002 \002(\014\022\n\n\002hp\030\003 \002(\005\022\014"
    "\n\004type\030\004 \002(\005\022\014\n\004team\030\005 \002(\005\"=\n\026MSG_USERIN"
    "FOLISTOS_S2C\022#\n\010userinfo\030\001 \003(\0132\021.Msg_USE"
    "RINFO_S2C\"U\n\rMSG_VECOS_S2C\022\t\n\001x\030\001 \002(\002\022\t\n"
    "\001y\030\002 \002(\002\022\021\n\tdirection\030\003 \002(\005\022\017\n\007ingrass\030\004"
    " \002(\005\022\n\n\002id\030\005 \002(\005\"0\n\021MSG_VECOSLIST_S2C\022\033\n"
    "\003vec\030\001 \003(\0132\016.MSG_VECOS_S2C\" \n\016MSG_INFOAC"
    "_C2S\022\016\n\006result\030\001 \002(\005*\220\006\n\007MsgType\022\021\n\014REGI"
    "STER_C2S\020\362\007\022\021\n\014REGISTER_S2C\020\332\017\022\016\n\tLOGIN_"
    "C2S\020\374\007\022\016\n\tLOGIN_S2C\020\344\017\022\024\n\017CREATE_ROOM_C2"
    "S\020\206\010\022\024\n\017CREATE_ROOM_S2C\020\356\017\022\023\n\016ENTER_ROOM"
    "_C2S\020\220\010\022\023\n\016ENTER_ROOM_S2C\020\370\017\022\025\n\020CHANGE_S"
    "TATE_C2S\020\232\010\022\025\n\020CHANGE_STATE_S2C\020\202\020\022\016\n\tEX"
    "PEL_C2S\020\244\010\022\016\n\tEXPEL_S2C\020\214\020\022\023\n\016START_GAME"
    "_C2S\020\256\010\022\023\n\016START_GAME_S2C\020\226\020\022\022\n\rEXIT_ROO"
    "M_C2S\020\270\010\022\022\n\rEXIT_ROOM_S2C\020\240\020\022\024\n\017GET_ROOM"
    "MEN_C2S\020\302\010\022\024\n\017GET_ROOMMEN_S2C\020\252\020\022\023\n\016FANG"
    "JIANLT_C2S\020\326\010\022\023\n\016FANGJIANLT_S2C\020\276\020\022\014\n\007VE"
    "C_C2S\020\340\010\022\014\n\007VEC_S2C\020\310\020\022\021\n\014PickSide_C2S\020\352"
    "\010\022\021\n\014PickSide_S2C\020\322\020\022\r\n\010Ammo_C2S\020\364\010\022\r\n\010A"
    "mmo_S2C\020\323\020\022\017\n\nDamage_C2S\020\324\020\022\017\n\nDamage_S2"
    "C\020\334\020\022\020\n\013GetItem_S2C\020\346\020\022\016\n\tDeath_S2C\020\360\020\022\020"
    "\n\013PointTaking\020\372\020\022\017\n\nPointTaken\020\204\021\022\016\n\tAdd"
    "Socres\020\216\021\022\014\n\007EndGame\020\217\021\022\021\n\014PointDispute\020"
    "\220\021\022\r\n\010RoomInfo\020\221\021\022\r\n\010RoomList\020\222\021\022\024\n\017Room"
    "InfoRequest\020\222\t\022\r\n\010UserInfo\020\223\021\022\017\n\nUserInf"
    "oOS\020\224\021\022\n\n\005VECOS\020\225\021\022\016\n\tVecOsList\020\226\021\022\013\n\006In"
    "foAc\020\227\021", 3247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Msg.proto", &protobuf_RegisterTypes);
  Msg_Register_C2S::default_instance_ = new Msg_Register_C2S();
  Msg_Register_S2C::default_instance_ = new Msg_Register_S2C();
  Msg_Login_C2S::default_instance_ = new Msg_Login_C2S();
  Msg_Login_S2C::default_instance_ = new Msg_Login_S2C();
  Msg_CreateRoom_C2S::default_instance_ = new Msg_CreateRoom_C2S();
  Msg_CreateRoom_S2C::default_instance_ = new Msg_CreateRoom_S2C();
  Msg_EnterRoom_C2S::default_instance_ = new Msg_EnterRoom_C2S();
  Msg_EnterRoom_S2C::default_instance_ = new Msg_EnterRoom_S2C();
  Msg_ChangeState_C2S::default_instance_ = new Msg_ChangeState_C2S();
  Msg_ChangeState_S2C::default_instance_ = new Msg_ChangeState_S2C();
  Msg_Expel_C2S::default_instance_ = new Msg_Expel_C2S();
  Msg_Expel_S2C::default_instance_ = new Msg_Expel_S2C();
  Msg_StartGame_C2S::default_instance_ = new Msg_StartGame_C2S();
  Msg_StartGame_S2C::default_instance_ = new Msg_StartGame_S2C();
  Msg_ExitRoom_C2S::default_instance_ = new Msg_ExitRoom_C2S();
  Msg_ExitRoom_S2C::default_instance_ = new Msg_ExitRoom_S2C();
  Msg_GetRoomMen_C2S::default_instance_ = new Msg_GetRoomMen_C2S();
  Msg_GetRoomMen_S2C::default_instance_ = new Msg_GetRoomMen_S2C();
  Msg_FANGJIANLT_C2S::default_instance_ = new Msg_FANGJIANLT_C2S();
  Msg_FANGJIANLT_S2C::default_instance_ = new Msg_FANGJIANLT_S2C();
  Msg_VEC_C2S::default_instance_ = new Msg_VEC_C2S();
  Msg_VEC_S2C::default_instance_ = new Msg_VEC_S2C();
  Msg_PICKSIDE_C2S::default_instance_ = new Msg_PICKSIDE_C2S();
  Msg_PICKSIDE_S2C::default_instance_ = new Msg_PICKSIDE_S2C();
  Msg_AMMO_C2S::default_instance_ = new Msg_AMMO_C2S();
  Msg_AMMO_S2C::default_instance_ = new Msg_AMMO_S2C();
  Msg_DAMAGE_C2S::default_instance_ = new Msg_DAMAGE_C2S();
  Msg_DAMAGE_S2C::default_instance_ = new Msg_DAMAGE_S2C();
  Msg_GETITEM_S2C::default_instance_ = new Msg_GETITEM_S2C();
  Msg_DEATH_S2C::default_instance_ = new Msg_DEATH_S2C();
  Msg_POINTTAKING_S2C::default_instance_ = new Msg_POINTTAKING_S2C();
  Msg_POINTTAKEN_S2C::default_instance_ = new Msg_POINTTAKEN_S2C();
  Msg_ADDSCORES_S2C::default_instance_ = new Msg_ADDSCORES_S2C();
  Msg_ENDGAME_S2C::default_instance_ = new Msg_ENDGAME_S2C();
  Msg_POINTDESPUTE_S2C::default_instance_ = new Msg_POINTDESPUTE_S2C();
  Msg_ROOMINFO_S2C::default_instance_ = new Msg_ROOMINFO_S2C();
  Msg_ROOMLIST_S2C::default_instance_ = new Msg_ROOMLIST_S2C();
  Msg_ROOMINFOREQUEST_C2S::default_instance_ = new Msg_ROOMINFOREQUEST_C2S();
  Msg_USERINFO_S2C::default_instance_ = new Msg_USERINFO_S2C();
  MSG_USERINFOLISTOS_S2C::default_instance_ = new MSG_USERINFOLISTOS_S2C();
  MSG_VECOS_S2C::default_instance_ = new MSG_VECOS_S2C();
  MSG_VECOSLIST_S2C::default_instance_ = new MSG_VECOSLIST_S2C();
  MSG_INFOAC_C2S::default_instance_ = new MSG_INFOAC_C2S();
  Msg_Register_C2S::default_instance_->InitAsDefaultInstance();
  Msg_Register_S2C::default_instance_->InitAsDefaultInstance();
  Msg_Login_C2S::default_instance_->InitAsDefaultInstance();
  Msg_Login_S2C::default_instance_->InitAsDefaultInstance();
  Msg_CreateRoom_C2S::default_instance_->InitAsDefaultInstance();
  Msg_CreateRoom_S2C::default_instance_->InitAsDefaultInstance();
  Msg_EnterRoom_C2S::default_instance_->InitAsDefaultInstance();
  Msg_EnterRoom_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ChangeState_C2S::default_instance_->InitAsDefaultInstance();
  Msg_ChangeState_S2C::default_instance_->InitAsDefaultInstance();
  Msg_Expel_C2S::default_instance_->InitAsDefaultInstance();
  Msg_Expel_S2C::default_instance_->InitAsDefaultInstance();
  Msg_StartGame_C2S::default_instance_->InitAsDefaultInstance();
  Msg_StartGame_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ExitRoom_C2S::default_instance_->InitAsDefaultInstance();
  Msg_ExitRoom_S2C::default_instance_->InitAsDefaultInstance();
  Msg_GetRoomMen_C2S::default_instance_->InitAsDefaultInstance();
  Msg_GetRoomMen_S2C::default_instance_->InitAsDefaultInstance();
  Msg_FANGJIANLT_C2S::default_instance_->InitAsDefaultInstance();
  Msg_FANGJIANLT_S2C::default_instance_->InitAsDefaultInstance();
  Msg_VEC_C2S::default_instance_->InitAsDefaultInstance();
  Msg_VEC_S2C::default_instance_->InitAsDefaultInstance();
  Msg_PICKSIDE_C2S::default_instance_->InitAsDefaultInstance();
  Msg_PICKSIDE_S2C::default_instance_->InitAsDefaultInstance();
  Msg_AMMO_C2S::default_instance_->InitAsDefaultInstance();
  Msg_AMMO_S2C::default_instance_->InitAsDefaultInstance();
  Msg_DAMAGE_C2S::default_instance_->InitAsDefaultInstance();
  Msg_DAMAGE_S2C::default_instance_->InitAsDefaultInstance();
  Msg_GETITEM_S2C::default_instance_->InitAsDefaultInstance();
  Msg_DEATH_S2C::default_instance_->InitAsDefaultInstance();
  Msg_POINTTAKING_S2C::default_instance_->InitAsDefaultInstance();
  Msg_POINTTAKEN_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ADDSCORES_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ENDGAME_S2C::default_instance_->InitAsDefaultInstance();
  Msg_POINTDESPUTE_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ROOMINFO_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ROOMLIST_S2C::default_instance_->InitAsDefaultInstance();
  Msg_ROOMINFOREQUEST_C2S::default_instance_->InitAsDefaultInstance();
  Msg_USERINFO_S2C::default_instance_->InitAsDefaultInstance();
  MSG_USERINFOLISTOS_S2C::default_instance_->InitAsDefaultInstance();
  MSG_VECOS_S2C::default_instance_->InitAsDefaultInstance();
  MSG_VECOSLIST_S2C::default_instance_->InitAsDefaultInstance();
  MSG_INFOAC_C2S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Msg_2eproto {
  StaticDescriptorInitializer_Msg_2eproto() {
    protobuf_AddDesc_Msg_2eproto();
  }
} static_descriptor_initializer_Msg_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1010:
    case 1020:
    case 1030:
    case 1040:
    case 1050:
    case 1060:
    case 1070:
    case 1080:
    case 1090:
    case 1110:
    case 1120:
    case 1130:
    case 1140:
    case 1170:
    case 2010:
    case 2020:
    case 2030:
    case 2040:
    case 2050:
    case 2060:
    case 2070:
    case 2080:
    case 2090:
    case 2110:
    case 2120:
    case 2130:
    case 2131:
    case 2132:
    case 2140:
    case 2150:
    case 2160:
    case 2170:
    case 2180:
    case 2190:
    case 2191:
    case 2192:
    case 2193:
    case 2194:
    case 2195:
    case 2196:
    case 2197:
    case 2198:
    case 2199:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Register_C2S::kSzNameFieldNumber;
const int Msg_Register_C2S::kSzPasswordFieldNumber;
#endif  // !_MSC_VER

Msg_Register_C2S::Msg_Register_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Register_C2S::InitAsDefaultInstance() {
}

Msg_Register_C2S::Msg_Register_C2S(const Msg_Register_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Register_C2S::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Register_C2S::~Msg_Register_C2S() {
  SharedDtor();
}

void Msg_Register_C2S::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (this != default_instance_) {
  }
}

void Msg_Register_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Register_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Register_C2S_descriptor_;
}

const Msg_Register_C2S& Msg_Register_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Register_C2S* Msg_Register_C2S::default_instance_ = NULL;

Msg_Register_C2S* Msg_Register_C2S::New() const {
  return new Msg_Register_C2S;
}

void Msg_Register_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Register_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szPassword;
        break;
      }

      // required bytes szPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szpassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Register_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->szname(), output);
  }

  // required bytes szPassword = 2;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->szpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Register_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes szName = 1;
  if (has_szname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szname(), target);
  }

  // required bytes szPassword = 2;
  if (has_szpassword()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->szpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Register_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szname());
    }

    // required bytes szPassword = 2;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Register_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Register_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Register_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Register_C2S::MergeFrom(const Msg_Register_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Register_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Register_C2S::CopyFrom(const Msg_Register_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Register_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_Register_C2S::Swap(Msg_Register_C2S* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Register_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Register_C2S_descriptor_;
  metadata.reflection = Msg_Register_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Register_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_Register_S2C::Msg_Register_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Register_S2C::InitAsDefaultInstance() {
}

Msg_Register_S2C::Msg_Register_S2C(const Msg_Register_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Register_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Register_S2C::~Msg_Register_S2C() {
  SharedDtor();
}

void Msg_Register_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Register_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Register_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Register_S2C_descriptor_;
}

const Msg_Register_S2C& Msg_Register_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Register_S2C* Msg_Register_S2C::default_instance_ = NULL;

Msg_Register_S2C* Msg_Register_S2C::New() const {
  return new Msg_Register_S2C;
}

void Msg_Register_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Register_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Register_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Register_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Register_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Register_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Register_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Register_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Register_S2C::MergeFrom(const Msg_Register_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Register_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Register_S2C::CopyFrom(const Msg_Register_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Register_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_Register_S2C::Swap(Msg_Register_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Register_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Register_S2C_descriptor_;
  metadata.reflection = Msg_Register_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Login_C2S::kSzNameFieldNumber;
const int Msg_Login_C2S::kSzPasswordFieldNumber;
#endif  // !_MSC_VER

Msg_Login_C2S::Msg_Login_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Login_C2S::InitAsDefaultInstance() {
}

Msg_Login_C2S::Msg_Login_C2S(const Msg_Login_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Login_C2S::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Login_C2S::~Msg_Login_C2S() {
  SharedDtor();
}

void Msg_Login_C2S::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (this != default_instance_) {
  }
}

void Msg_Login_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Login_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Login_C2S_descriptor_;
}

const Msg_Login_C2S& Msg_Login_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Login_C2S* Msg_Login_C2S::default_instance_ = NULL;

Msg_Login_C2S* Msg_Login_C2S::New() const {
  return new Msg_Login_C2S;
}

void Msg_Login_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Login_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szPassword;
        break;
      }

      // required bytes szPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szpassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Login_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->szname(), output);
  }

  // required bytes szPassword = 2;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->szpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Login_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes szName = 1;
  if (has_szname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szname(), target);
  }

  // required bytes szPassword = 2;
  if (has_szpassword()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->szpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Login_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szname());
    }

    // required bytes szPassword = 2;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Login_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Login_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Login_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Login_C2S::MergeFrom(const Msg_Login_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Login_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Login_C2S::CopyFrom(const Msg_Login_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_Login_C2S::Swap(Msg_Login_C2S* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Login_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Login_C2S_descriptor_;
  metadata.reflection = Msg_Login_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Login_S2C::kResultFieldNumber;
const int Msg_Login_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_Login_S2C::Msg_Login_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Login_S2C::InitAsDefaultInstance() {
}

Msg_Login_S2C::Msg_Login_S2C(const Msg_Login_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Login_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Login_S2C::~Msg_Login_S2C() {
  SharedDtor();
}

void Msg_Login_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Login_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Login_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Login_S2C_descriptor_;
}

const Msg_Login_S2C& Msg_Login_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Login_S2C* Msg_Login_S2C::default_instance_ = NULL;

Msg_Login_S2C* Msg_Login_S2C::New() const {
  return new Msg_Login_S2C;
}

void Msg_Login_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Login_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Login_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Login_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Login_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Login_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Login_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Login_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Login_S2C::MergeFrom(const Msg_Login_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Login_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Login_S2C::CopyFrom(const Msg_Login_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_Login_S2C::Swap(Msg_Login_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Login_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Login_S2C_descriptor_;
  metadata.reflection = Msg_Login_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_CreateRoom_C2S::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_CreateRoom_C2S::Msg_CreateRoom_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_CreateRoom_C2S::InitAsDefaultInstance() {
}

Msg_CreateRoom_C2S::Msg_CreateRoom_C2S(const Msg_CreateRoom_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_CreateRoom_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_CreateRoom_C2S::~Msg_CreateRoom_C2S() {
  SharedDtor();
}

void Msg_CreateRoom_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_CreateRoom_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_CreateRoom_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_CreateRoom_C2S_descriptor_;
}

const Msg_CreateRoom_C2S& Msg_CreateRoom_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_CreateRoom_C2S* Msg_CreateRoom_C2S::default_instance_ = NULL;

Msg_CreateRoom_C2S* Msg_CreateRoom_C2S::New() const {
  return new Msg_CreateRoom_C2S;
}

void Msg_CreateRoom_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_CreateRoom_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_CreateRoom_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_CreateRoom_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_CreateRoom_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_CreateRoom_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_CreateRoom_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_CreateRoom_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_CreateRoom_C2S::MergeFrom(const Msg_CreateRoom_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_CreateRoom_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_CreateRoom_C2S::CopyFrom(const Msg_CreateRoom_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CreateRoom_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_CreateRoom_C2S::Swap(Msg_CreateRoom_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_CreateRoom_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_CreateRoom_C2S_descriptor_;
  metadata.reflection = Msg_CreateRoom_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_CreateRoom_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_CreateRoom_S2C::Msg_CreateRoom_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_CreateRoom_S2C::InitAsDefaultInstance() {
}

Msg_CreateRoom_S2C::Msg_CreateRoom_S2C(const Msg_CreateRoom_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_CreateRoom_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_CreateRoom_S2C::~Msg_CreateRoom_S2C() {
  SharedDtor();
}

void Msg_CreateRoom_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_CreateRoom_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_CreateRoom_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_CreateRoom_S2C_descriptor_;
}

const Msg_CreateRoom_S2C& Msg_CreateRoom_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_CreateRoom_S2C* Msg_CreateRoom_S2C::default_instance_ = NULL;

Msg_CreateRoom_S2C* Msg_CreateRoom_S2C::New() const {
  return new Msg_CreateRoom_S2C;
}

void Msg_CreateRoom_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_CreateRoom_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_CreateRoom_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_CreateRoom_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_CreateRoom_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_CreateRoom_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_CreateRoom_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_CreateRoom_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_CreateRoom_S2C::MergeFrom(const Msg_CreateRoom_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_CreateRoom_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_CreateRoom_S2C::CopyFrom(const Msg_CreateRoom_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CreateRoom_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_CreateRoom_S2C::Swap(Msg_CreateRoom_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_CreateRoom_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_CreateRoom_S2C_descriptor_;
  metadata.reflection = Msg_CreateRoom_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_EnterRoom_C2S::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_EnterRoom_C2S::Msg_EnterRoom_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_EnterRoom_C2S::InitAsDefaultInstance() {
}

Msg_EnterRoom_C2S::Msg_EnterRoom_C2S(const Msg_EnterRoom_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_EnterRoom_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_EnterRoom_C2S::~Msg_EnterRoom_C2S() {
  SharedDtor();
}

void Msg_EnterRoom_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_EnterRoom_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_EnterRoom_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_EnterRoom_C2S_descriptor_;
}

const Msg_EnterRoom_C2S& Msg_EnterRoom_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_EnterRoom_C2S* Msg_EnterRoom_C2S::default_instance_ = NULL;

Msg_EnterRoom_C2S* Msg_EnterRoom_C2S::New() const {
  return new Msg_EnterRoom_C2S;
}

void Msg_EnterRoom_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_EnterRoom_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_EnterRoom_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_EnterRoom_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_EnterRoom_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_EnterRoom_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_EnterRoom_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_EnterRoom_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_EnterRoom_C2S::MergeFrom(const Msg_EnterRoom_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_EnterRoom_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_EnterRoom_C2S::CopyFrom(const Msg_EnterRoom_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_EnterRoom_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_EnterRoom_C2S::Swap(Msg_EnterRoom_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_EnterRoom_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_EnterRoom_C2S_descriptor_;
  metadata.reflection = Msg_EnterRoom_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_EnterRoom_S2C::kResultFieldNumber;
const int Msg_EnterRoom_S2C::kNumberFieldNumber;
const int Msg_EnterRoom_S2C::kSzNameFieldNumber;
#endif  // !_MSC_VER

Msg_EnterRoom_S2C::Msg_EnterRoom_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_EnterRoom_S2C::InitAsDefaultInstance() {
}

Msg_EnterRoom_S2C::Msg_EnterRoom_S2C(const Msg_EnterRoom_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_EnterRoom_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  number_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_EnterRoom_S2C::~Msg_EnterRoom_S2C() {
  SharedDtor();
}

void Msg_EnterRoom_S2C::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void Msg_EnterRoom_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_EnterRoom_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_EnterRoom_S2C_descriptor_;
}

const Msg_EnterRoom_S2C& Msg_EnterRoom_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_EnterRoom_S2C* Msg_EnterRoom_S2C::default_instance_ = NULL;

Msg_EnterRoom_S2C* Msg_EnterRoom_S2C::New() const {
  return new Msg_EnterRoom_S2C;
}

void Msg_EnterRoom_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    number_ = 0;
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_EnterRoom_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szName;
        break;
      }

      // optional bytes szName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_EnterRoom_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // optional bytes szName = 3;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->szname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_EnterRoom_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // optional bytes szName = 3;
  if (has_szname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->szname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_EnterRoom_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional bytes szName = 3;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_EnterRoom_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_EnterRoom_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_EnterRoom_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_EnterRoom_S2C::MergeFrom(const Msg_EnterRoom_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_szname()) {
      set_szname(from.szname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_EnterRoom_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_EnterRoom_S2C::CopyFrom(const Msg_EnterRoom_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_EnterRoom_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_EnterRoom_S2C::Swap(Msg_EnterRoom_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(number_, other->number_);
    std::swap(szname_, other->szname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_EnterRoom_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_EnterRoom_S2C_descriptor_;
  metadata.reflection = Msg_EnterRoom_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ChangeState_C2S::kNumber1FieldNumber;
const int Msg_ChangeState_C2S::kNumber2FieldNumber;
const int Msg_ChangeState_C2S::kTypeFieldNumber;
const int Msg_ChangeState_C2S::kReadyFieldNumber;
#endif  // !_MSC_VER

Msg_ChangeState_C2S::Msg_ChangeState_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ChangeState_C2S::InitAsDefaultInstance() {
}

Msg_ChangeState_C2S::Msg_ChangeState_C2S(const Msg_ChangeState_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ChangeState_C2S::SharedCtor() {
  _cached_size_ = 0;
  number1_ = 0;
  number2_ = 0;
  type_ = 0;
  ready_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ChangeState_C2S::~Msg_ChangeState_C2S() {
  SharedDtor();
}

void Msg_ChangeState_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ChangeState_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ChangeState_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ChangeState_C2S_descriptor_;
}

const Msg_ChangeState_C2S& Msg_ChangeState_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ChangeState_C2S* Msg_ChangeState_C2S::default_instance_ = NULL;

Msg_ChangeState_C2S* Msg_ChangeState_C2S::New() const {
  return new Msg_ChangeState_C2S;
}

void Msg_ChangeState_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number1_ = 0;
    number2_ = 0;
    type_ = 0;
    ready_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ChangeState_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number1_)));
          set_has_number1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number2;
        break;
      }

      // optional int32 number2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number2_)));
          set_has_number2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // optional int32 ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ChangeState_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number1 = 2;
  if (has_number1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number1(), output);
  }

  // optional int32 number2 = 3;
  if (has_number2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number2(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 ready = 5;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ChangeState_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number1 = 2;
  if (has_number1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number1(), target);
  }

  // optional int32 number2 = 3;
  if (has_number2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number2(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 ready = 5;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ChangeState_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number1 = 2;
    if (has_number1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number1());
    }

    // optional int32 number2 = 3;
    if (has_number2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number2());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ready = 5;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ChangeState_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ChangeState_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ChangeState_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ChangeState_C2S::MergeFrom(const Msg_ChangeState_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number1()) {
      set_number1(from.number1());
    }
    if (from.has_number2()) {
      set_number2(from.number2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ChangeState_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ChangeState_C2S::CopyFrom(const Msg_ChangeState_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ChangeState_C2S::IsInitialized() const {

  return true;
}

void Msg_ChangeState_C2S::Swap(Msg_ChangeState_C2S* other) {
  if (other != this) {
    std::swap(number1_, other->number1_);
    std::swap(number2_, other->number2_);
    std::swap(type_, other->type_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ChangeState_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ChangeState_C2S_descriptor_;
  metadata.reflection = Msg_ChangeState_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ChangeState_S2C::kResultFieldNumber;
const int Msg_ChangeState_S2C::kNumber1FieldNumber;
const int Msg_ChangeState_S2C::kNumber2FieldNumber;
const int Msg_ChangeState_S2C::kTypeFieldNumber;
const int Msg_ChangeState_S2C::kReadyFieldNumber;
#endif  // !_MSC_VER

Msg_ChangeState_S2C::Msg_ChangeState_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ChangeState_S2C::InitAsDefaultInstance() {
}

Msg_ChangeState_S2C::Msg_ChangeState_S2C(const Msg_ChangeState_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ChangeState_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  number1_ = 0;
  number2_ = 0;
  type_ = 0;
  ready_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ChangeState_S2C::~Msg_ChangeState_S2C() {
  SharedDtor();
}

void Msg_ChangeState_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ChangeState_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ChangeState_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ChangeState_S2C_descriptor_;
}

const Msg_ChangeState_S2C& Msg_ChangeState_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ChangeState_S2C* Msg_ChangeState_S2C::default_instance_ = NULL;

Msg_ChangeState_S2C* Msg_ChangeState_S2C::New() const {
  return new Msg_ChangeState_S2C;
}

void Msg_ChangeState_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    number1_ = 0;
    number2_ = 0;
    type_ = 0;
    ready_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ChangeState_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number1;
        break;
      }

      // optional int32 number1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number1_)));
          set_has_number1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number2;
        break;
      }

      // optional int32 number2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number2_)));
          set_has_number2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // optional int32 ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ChangeState_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 number1 = 2;
  if (has_number1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number1(), output);
  }

  // optional int32 number2 = 3;
  if (has_number2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number2(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 ready = 5;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ChangeState_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 number1 = 2;
  if (has_number1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number1(), target);
  }

  // optional int32 number2 = 3;
  if (has_number2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number2(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 ready = 5;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ChangeState_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 number1 = 2;
    if (has_number1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number1());
    }

    // optional int32 number2 = 3;
    if (has_number2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number2());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ready = 5;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ChangeState_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ChangeState_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ChangeState_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ChangeState_S2C::MergeFrom(const Msg_ChangeState_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_number1()) {
      set_number1(from.number1());
    }
    if (from.has_number2()) {
      set_number2(from.number2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ChangeState_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ChangeState_S2C::CopyFrom(const Msg_ChangeState_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ChangeState_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_ChangeState_S2C::Swap(Msg_ChangeState_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(number1_, other->number1_);
    std::swap(number2_, other->number2_);
    std::swap(type_, other->type_);
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ChangeState_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ChangeState_S2C_descriptor_;
  metadata.reflection = Msg_ChangeState_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Expel_C2S::kNumberFieldNumber;
const int Msg_Expel_C2S::kIdFieldNumber;
const int Msg_Expel_C2S::kUseridFieldNumber;
#endif  // !_MSC_VER

Msg_Expel_C2S::Msg_Expel_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Expel_C2S::InitAsDefaultInstance() {
}

Msg_Expel_C2S::Msg_Expel_C2S(const Msg_Expel_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Expel_C2S::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  id_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Expel_C2S::~Msg_Expel_C2S() {
  SharedDtor();
}

void Msg_Expel_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Expel_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Expel_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Expel_C2S_descriptor_;
}

const Msg_Expel_C2S& Msg_Expel_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Expel_C2S* Msg_Expel_C2S::default_instance_ = NULL;

Msg_Expel_C2S* Msg_Expel_C2S::New() const {
  return new Msg_Expel_C2S;
}

void Msg_Expel_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    id_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Expel_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int32 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Expel_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Expel_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Expel_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Expel_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Expel_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Expel_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Expel_C2S::MergeFrom(const Msg_Expel_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Expel_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Expel_C2S::CopyFrom(const Msg_Expel_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Expel_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_Expel_C2S::Swap(Msg_Expel_C2S* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Expel_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Expel_C2S_descriptor_;
  metadata.reflection = Msg_Expel_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Expel_S2C::kResultFieldNumber;
const int Msg_Expel_S2C::kNumberFieldNumber;
#endif  // !_MSC_VER

Msg_Expel_S2C::Msg_Expel_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Expel_S2C::InitAsDefaultInstance() {
}

Msg_Expel_S2C::Msg_Expel_S2C(const Msg_Expel_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Expel_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Expel_S2C::~Msg_Expel_S2C() {
  SharedDtor();
}

void Msg_Expel_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Expel_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Expel_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Expel_S2C_descriptor_;
}

const Msg_Expel_S2C& Msg_Expel_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Expel_S2C* Msg_Expel_S2C::default_instance_ = NULL;

Msg_Expel_S2C* Msg_Expel_S2C::New() const {
  return new Msg_Expel_S2C;
}

void Msg_Expel_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Expel_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Expel_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Expel_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Expel_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Expel_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Expel_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Expel_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Expel_S2C::MergeFrom(const Msg_Expel_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Expel_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Expel_S2C::CopyFrom(const Msg_Expel_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Expel_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_Expel_S2C::Swap(Msg_Expel_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Expel_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Expel_S2C_descriptor_;
  metadata.reflection = Msg_Expel_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_StartGame_C2S::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_StartGame_C2S::Msg_StartGame_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_StartGame_C2S::InitAsDefaultInstance() {
}

Msg_StartGame_C2S::Msg_StartGame_C2S(const Msg_StartGame_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_StartGame_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_StartGame_C2S::~Msg_StartGame_C2S() {
  SharedDtor();
}

void Msg_StartGame_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_StartGame_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_StartGame_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_StartGame_C2S_descriptor_;
}

const Msg_StartGame_C2S& Msg_StartGame_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_StartGame_C2S* Msg_StartGame_C2S::default_instance_ = NULL;

Msg_StartGame_C2S* Msg_StartGame_C2S::New() const {
  return new Msg_StartGame_C2S;
}

void Msg_StartGame_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_StartGame_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_StartGame_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_StartGame_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_StartGame_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_StartGame_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_StartGame_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_StartGame_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_StartGame_C2S::MergeFrom(const Msg_StartGame_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_StartGame_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StartGame_C2S::CopyFrom(const Msg_StartGame_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StartGame_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_StartGame_C2S::Swap(Msg_StartGame_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_StartGame_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_StartGame_C2S_descriptor_;
  metadata.reflection = Msg_StartGame_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_StartGame_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_StartGame_S2C::Msg_StartGame_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_StartGame_S2C::InitAsDefaultInstance() {
}

Msg_StartGame_S2C::Msg_StartGame_S2C(const Msg_StartGame_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_StartGame_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_StartGame_S2C::~Msg_StartGame_S2C() {
  SharedDtor();
}

void Msg_StartGame_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_StartGame_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_StartGame_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_StartGame_S2C_descriptor_;
}

const Msg_StartGame_S2C& Msg_StartGame_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_StartGame_S2C* Msg_StartGame_S2C::default_instance_ = NULL;

Msg_StartGame_S2C* Msg_StartGame_S2C::New() const {
  return new Msg_StartGame_S2C;
}

void Msg_StartGame_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_StartGame_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_StartGame_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_StartGame_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_StartGame_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_StartGame_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_StartGame_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_StartGame_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_StartGame_S2C::MergeFrom(const Msg_StartGame_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_StartGame_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StartGame_S2C::CopyFrom(const Msg_StartGame_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StartGame_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_StartGame_S2C::Swap(Msg_StartGame_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_StartGame_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_StartGame_S2C_descriptor_;
  metadata.reflection = Msg_StartGame_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ExitRoom_C2S::kIdFieldNumber;
const int Msg_ExitRoom_C2S::kNumberFieldNumber;
#endif  // !_MSC_VER

Msg_ExitRoom_C2S::Msg_ExitRoom_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ExitRoom_C2S::InitAsDefaultInstance() {
}

Msg_ExitRoom_C2S::Msg_ExitRoom_C2S(const Msg_ExitRoom_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ExitRoom_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ExitRoom_C2S::~Msg_ExitRoom_C2S() {
  SharedDtor();
}

void Msg_ExitRoom_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ExitRoom_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ExitRoom_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ExitRoom_C2S_descriptor_;
}

const Msg_ExitRoom_C2S& Msg_ExitRoom_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ExitRoom_C2S* Msg_ExitRoom_C2S::default_instance_ = NULL;

Msg_ExitRoom_C2S* Msg_ExitRoom_C2S::New() const {
  return new Msg_ExitRoom_C2S;
}

void Msg_ExitRoom_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ExitRoom_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ExitRoom_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ExitRoom_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ExitRoom_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ExitRoom_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ExitRoom_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ExitRoom_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ExitRoom_C2S::MergeFrom(const Msg_ExitRoom_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ExitRoom_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ExitRoom_C2S::CopyFrom(const Msg_ExitRoom_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ExitRoom_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_ExitRoom_C2S::Swap(Msg_ExitRoom_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ExitRoom_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ExitRoom_C2S_descriptor_;
  metadata.reflection = Msg_ExitRoom_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ExitRoom_S2C::kResultFieldNumber;
const int Msg_ExitRoom_S2C::kNumberFieldNumber;
#endif  // !_MSC_VER

Msg_ExitRoom_S2C::Msg_ExitRoom_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ExitRoom_S2C::InitAsDefaultInstance() {
}

Msg_ExitRoom_S2C::Msg_ExitRoom_S2C(const Msg_ExitRoom_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ExitRoom_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ExitRoom_S2C::~Msg_ExitRoom_S2C() {
  SharedDtor();
}

void Msg_ExitRoom_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ExitRoom_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ExitRoom_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ExitRoom_S2C_descriptor_;
}

const Msg_ExitRoom_S2C& Msg_ExitRoom_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ExitRoom_S2C* Msg_ExitRoom_S2C::default_instance_ = NULL;

Msg_ExitRoom_S2C* Msg_ExitRoom_S2C::New() const {
  return new Msg_ExitRoom_S2C;
}

void Msg_ExitRoom_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ExitRoom_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ExitRoom_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ExitRoom_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ExitRoom_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ExitRoom_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ExitRoom_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ExitRoom_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ExitRoom_S2C::MergeFrom(const Msg_ExitRoom_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ExitRoom_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ExitRoom_S2C::CopyFrom(const Msg_ExitRoom_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ExitRoom_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_ExitRoom_S2C::Swap(Msg_ExitRoom_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ExitRoom_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ExitRoom_S2C_descriptor_;
  metadata.reflection = Msg_ExitRoom_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GetRoomMen_C2S::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_GetRoomMen_C2S::Msg_GetRoomMen_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GetRoomMen_C2S::InitAsDefaultInstance() {
}

Msg_GetRoomMen_C2S::Msg_GetRoomMen_C2S(const Msg_GetRoomMen_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GetRoomMen_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GetRoomMen_C2S::~Msg_GetRoomMen_C2S() {
  SharedDtor();
}

void Msg_GetRoomMen_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_GetRoomMen_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GetRoomMen_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GetRoomMen_C2S_descriptor_;
}

const Msg_GetRoomMen_C2S& Msg_GetRoomMen_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_GetRoomMen_C2S* Msg_GetRoomMen_C2S::default_instance_ = NULL;

Msg_GetRoomMen_C2S* Msg_GetRoomMen_C2S::New() const {
  return new Msg_GetRoomMen_C2S;
}

void Msg_GetRoomMen_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GetRoomMen_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GetRoomMen_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GetRoomMen_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GetRoomMen_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GetRoomMen_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GetRoomMen_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GetRoomMen_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GetRoomMen_C2S::MergeFrom(const Msg_GetRoomMen_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GetRoomMen_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GetRoomMen_C2S::CopyFrom(const Msg_GetRoomMen_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GetRoomMen_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_GetRoomMen_C2S::Swap(Msg_GetRoomMen_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GetRoomMen_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GetRoomMen_C2S_descriptor_;
  metadata.reflection = Msg_GetRoomMen_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GetRoomMen_S2C::kResultFieldNumber;
const int Msg_GetRoomMen_S2C::kNumberFieldNumber;
const int Msg_GetRoomMen_S2C::kSzNameFieldNumber;
const int Msg_GetRoomMen_S2C::kTankTypeFieldNumber;
const int Msg_GetRoomMen_S2C::kReadyFieldNumber;
#endif  // !_MSC_VER

Msg_GetRoomMen_S2C::Msg_GetRoomMen_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GetRoomMen_S2C::InitAsDefaultInstance() {
}

Msg_GetRoomMen_S2C::Msg_GetRoomMen_S2C(const Msg_GetRoomMen_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GetRoomMen_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GetRoomMen_S2C::~Msg_GetRoomMen_S2C() {
  SharedDtor();
}

void Msg_GetRoomMen_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_GetRoomMen_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GetRoomMen_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GetRoomMen_S2C_descriptor_;
}

const Msg_GetRoomMen_S2C& Msg_GetRoomMen_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_GetRoomMen_S2C* Msg_GetRoomMen_S2C::default_instance_ = NULL;

Msg_GetRoomMen_S2C* Msg_GetRoomMen_S2C::New() const {
  return new Msg_GetRoomMen_S2C;
}

void Msg_GetRoomMen_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  number_.Clear();
  szname_.Clear();
  tanktype_.Clear();
  ready_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GetRoomMen_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // repeated int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_number())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_number())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        if (input->ExpectTag(26)) goto parse_szName;
        break;
      }

      // repeated bytes szName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szName;
        if (input->ExpectTag(32)) goto parse_tankType;
        break;
      }

      // repeated int32 tankType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tankType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_tanktype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tanktype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tankType;
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // repeated int32 ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_ready())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GetRoomMen_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 number = 2;
  for (int i = 0; i < this->number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->number(i), output);
  }

  // repeated bytes szName = 3;
  for (int i = 0; i < this->szname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->szname(i), output);
  }

  // repeated int32 tankType = 4;
  for (int i = 0; i < this->tanktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->tanktype(i), output);
  }

  // repeated int32 ready = 5;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->ready(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GetRoomMen_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 number = 2;
  for (int i = 0; i < this->number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->number(i), target);
  }

  // repeated bytes szName = 3;
  for (int i = 0; i < this->szname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->szname(i), target);
  }

  // repeated int32 tankType = 4;
  for (int i = 0; i < this->tanktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->tanktype(i), target);
  }

  // repeated int32 ready = 5;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->ready(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GetRoomMen_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 number = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->number(i));
    }
    total_size += 1 * this->number_size() + data_size;
  }

  // repeated bytes szName = 3;
  total_size += 1 * this->szname_size();
  for (int i = 0; i < this->szname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->szname(i));
  }

  // repeated int32 tankType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->tanktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tanktype(i));
    }
    total_size += 1 * this->tanktype_size() + data_size;
  }

  // repeated int32 ready = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GetRoomMen_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GetRoomMen_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GetRoomMen_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GetRoomMen_S2C::MergeFrom(const Msg_GetRoomMen_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  number_.MergeFrom(from.number_);
  szname_.MergeFrom(from.szname_);
  tanktype_.MergeFrom(from.tanktype_);
  ready_.MergeFrom(from.ready_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GetRoomMen_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GetRoomMen_S2C::CopyFrom(const Msg_GetRoomMen_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GetRoomMen_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_GetRoomMen_S2C::Swap(Msg_GetRoomMen_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    number_.Swap(&other->number_);
    szname_.Swap(&other->szname_);
    tanktype_.Swap(&other->tanktype_);
    ready_.Swap(&other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GetRoomMen_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GetRoomMen_S2C_descriptor_;
  metadata.reflection = Msg_GetRoomMen_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_FANGJIANLT_C2S::kSzContentFieldNumber;
const int Msg_FANGJIANLT_C2S::kSzNameFieldNumber;
const int Msg_FANGJIANLT_C2S::kHouseidFieldNumber;
#endif  // !_MSC_VER

Msg_FANGJIANLT_C2S::Msg_FANGJIANLT_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_FANGJIANLT_C2S::InitAsDefaultInstance() {
}

Msg_FANGJIANLT_C2S::Msg_FANGJIANLT_C2S(const Msg_FANGJIANLT_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_FANGJIANLT_C2S::SharedCtor() {
  _cached_size_ = 0;
  szcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  houseid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_FANGJIANLT_C2S::~Msg_FANGJIANLT_C2S() {
  SharedDtor();
}

void Msg_FANGJIANLT_C2S::SharedDtor() {
  if (szcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete szcontent_;
  }
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void Msg_FANGJIANLT_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_FANGJIANLT_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_FANGJIANLT_C2S_descriptor_;
}

const Msg_FANGJIANLT_C2S& Msg_FANGJIANLT_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_FANGJIANLT_C2S* Msg_FANGJIANLT_C2S::default_instance_ = NULL;

Msg_FANGJIANLT_C2S* Msg_FANGJIANLT_C2S::New() const {
  return new Msg_FANGJIANLT_C2S;
}

void Msg_FANGJIANLT_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szcontent()) {
      if (szcontent_ != &::google::protobuf::internal::kEmptyString) {
        szcontent_->clear();
      }
    }
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    houseid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_FANGJIANLT_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes szContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szName;
        break;
      }

      // required bytes szName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_houseid;
        break;
      }

      // required int32 houseid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_houseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &houseid_)));
          set_has_houseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_FANGJIANLT_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes szContent = 1;
  if (has_szcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->szcontent(), output);
  }

  // required bytes szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->szname(), output);
  }

  // required int32 houseid = 3;
  if (has_houseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->houseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_FANGJIANLT_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes szContent = 1;
  if (has_szcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szcontent(), target);
  }

  // required bytes szName = 2;
  if (has_szname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->szname(), target);
  }

  // required int32 houseid = 3;
  if (has_houseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->houseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_FANGJIANLT_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes szContent = 1;
    if (has_szcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szcontent());
    }

    // required bytes szName = 2;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szname());
    }

    // required int32 houseid = 3;
    if (has_houseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->houseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_FANGJIANLT_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_FANGJIANLT_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_FANGJIANLT_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_FANGJIANLT_C2S::MergeFrom(const Msg_FANGJIANLT_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szcontent()) {
      set_szcontent(from.szcontent());
    }
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_houseid()) {
      set_houseid(from.houseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_FANGJIANLT_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_FANGJIANLT_C2S::CopyFrom(const Msg_FANGJIANLT_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_FANGJIANLT_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_FANGJIANLT_C2S::Swap(Msg_FANGJIANLT_C2S* other) {
  if (other != this) {
    std::swap(szcontent_, other->szcontent_);
    std::swap(szname_, other->szname_);
    std::swap(houseid_, other->houseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_FANGJIANLT_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_FANGJIANLT_C2S_descriptor_;
  metadata.reflection = Msg_FANGJIANLT_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_FANGJIANLT_S2C::kResultFieldNumber;
const int Msg_FANGJIANLT_S2C::kSzContentFieldNumber;
const int Msg_FANGJIANLT_S2C::kSzNameFieldNumber;
#endif  // !_MSC_VER

Msg_FANGJIANLT_S2C::Msg_FANGJIANLT_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_FANGJIANLT_S2C::InitAsDefaultInstance() {
}

Msg_FANGJIANLT_S2C::Msg_FANGJIANLT_S2C(const Msg_FANGJIANLT_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_FANGJIANLT_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  szcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_FANGJIANLT_S2C::~Msg_FANGJIANLT_S2C() {
  SharedDtor();
}

void Msg_FANGJIANLT_S2C::SharedDtor() {
  if (szcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete szcontent_;
  }
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void Msg_FANGJIANLT_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_FANGJIANLT_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_FANGJIANLT_S2C_descriptor_;
}

const Msg_FANGJIANLT_S2C& Msg_FANGJIANLT_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_FANGJIANLT_S2C* Msg_FANGJIANLT_S2C::default_instance_ = NULL;

Msg_FANGJIANLT_S2C* Msg_FANGJIANLT_S2C::New() const {
  return new Msg_FANGJIANLT_S2C;
}

void Msg_FANGJIANLT_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_szcontent()) {
      if (szcontent_ != &::google::protobuf::internal::kEmptyString) {
        szcontent_->clear();
      }
    }
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_FANGJIANLT_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szContent;
        break;
      }

      // optional bytes szContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szName;
        break;
      }

      // optional bytes szName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_FANGJIANLT_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bytes szContent = 2;
  if (has_szcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->szcontent(), output);
  }

  // optional bytes szName = 3;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->szname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_FANGJIANLT_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bytes szContent = 2;
  if (has_szcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->szcontent(), target);
  }

  // optional bytes szName = 3;
  if (has_szname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->szname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_FANGJIANLT_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bytes szContent = 2;
    if (has_szcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szcontent());
    }

    // optional bytes szName = 3;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_FANGJIANLT_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_FANGJIANLT_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_FANGJIANLT_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_FANGJIANLT_S2C::MergeFrom(const Msg_FANGJIANLT_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_szcontent()) {
      set_szcontent(from.szcontent());
    }
    if (from.has_szname()) {
      set_szname(from.szname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_FANGJIANLT_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_FANGJIANLT_S2C::CopyFrom(const Msg_FANGJIANLT_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_FANGJIANLT_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_FANGJIANLT_S2C::Swap(Msg_FANGJIANLT_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(szcontent_, other->szcontent_);
    std::swap(szname_, other->szname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_FANGJIANLT_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_FANGJIANLT_S2C_descriptor_;
  metadata.reflection = Msg_FANGJIANLT_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_VEC_C2S::kXFieldNumber;
const int Msg_VEC_C2S::kYFieldNumber;
const int Msg_VEC_C2S::kDirectionFieldNumber;
const int Msg_VEC_C2S::kIngrassFieldNumber;
#endif  // !_MSC_VER

Msg_VEC_C2S::Msg_VEC_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_VEC_C2S::InitAsDefaultInstance() {
}

Msg_VEC_C2S::Msg_VEC_C2S(const Msg_VEC_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_VEC_C2S::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  ingrass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_VEC_C2S::~Msg_VEC_C2S() {
  SharedDtor();
}

void Msg_VEC_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_VEC_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_VEC_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_VEC_C2S_descriptor_;
}

const Msg_VEC_C2S& Msg_VEC_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_VEC_C2S* Msg_VEC_C2S::default_instance_ = NULL;

Msg_VEC_C2S* Msg_VEC_C2S::New() const {
  return new Msg_VEC_C2S;
}

void Msg_VEC_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    ingrass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_VEC_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ingrass;
        break;
      }

      // required int32 ingrass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingrass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ingrass_)));
          set_has_ingrass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_VEC_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 ingrass = 4;
  if (has_ingrass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ingrass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_VEC_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 ingrass = 4;
  if (has_ingrass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ingrass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_VEC_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required int32 ingrass = 4;
    if (has_ingrass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ingrass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_VEC_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_VEC_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_VEC_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_VEC_C2S::MergeFrom(const Msg_VEC_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_ingrass()) {
      set_ingrass(from.ingrass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_VEC_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_VEC_C2S::CopyFrom(const Msg_VEC_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_VEC_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_VEC_C2S::Swap(Msg_VEC_C2S* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(ingrass_, other->ingrass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_VEC_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_VEC_C2S_descriptor_;
  metadata.reflection = Msg_VEC_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_VEC_S2C::kXFieldNumber;
const int Msg_VEC_S2C::kYFieldNumber;
const int Msg_VEC_S2C::kDirectionFieldNumber;
const int Msg_VEC_S2C::kIdFieldNumber;
const int Msg_VEC_S2C::kHideFieldNumber;
#endif  // !_MSC_VER

Msg_VEC_S2C::Msg_VEC_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_VEC_S2C::InitAsDefaultInstance() {
}

Msg_VEC_S2C::Msg_VEC_S2C(const Msg_VEC_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_VEC_S2C::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  id_ = 0;
  hide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_VEC_S2C::~Msg_VEC_S2C() {
  SharedDtor();
}

void Msg_VEC_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_VEC_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_VEC_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_VEC_S2C_descriptor_;
}

const Msg_VEC_S2C& Msg_VEC_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_VEC_S2C* Msg_VEC_S2C::default_instance_ = NULL;

Msg_VEC_S2C* Msg_VEC_S2C::New() const {
  return new Msg_VEC_S2C;
}

void Msg_VEC_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    id_ = 0;
    hide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_VEC_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hide;
        break;
      }

      // required int32 hide = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hide_)));
          set_has_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_VEC_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // required int32 hide = 5;
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_VEC_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // required int32 hide = 5;
  if (has_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_VEC_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 hide = 5;
    if (has_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_VEC_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_VEC_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_VEC_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_VEC_S2C::MergeFrom(const Msg_VEC_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hide()) {
      set_hide(from.hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_VEC_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_VEC_S2C::CopyFrom(const Msg_VEC_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_VEC_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_VEC_S2C::Swap(Msg_VEC_S2C* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(id_, other->id_);
    std::swap(hide_, other->hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_VEC_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_VEC_S2C_descriptor_;
  metadata.reflection = Msg_VEC_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_PICKSIDE_C2S::kSideFieldNumber;
#endif  // !_MSC_VER

Msg_PICKSIDE_C2S::Msg_PICKSIDE_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_PICKSIDE_C2S::InitAsDefaultInstance() {
}

Msg_PICKSIDE_C2S::Msg_PICKSIDE_C2S(const Msg_PICKSIDE_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_PICKSIDE_C2S::SharedCtor() {
  _cached_size_ = 0;
  side_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_PICKSIDE_C2S::~Msg_PICKSIDE_C2S() {
  SharedDtor();
}

void Msg_PICKSIDE_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_PICKSIDE_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_PICKSIDE_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_PICKSIDE_C2S_descriptor_;
}

const Msg_PICKSIDE_C2S& Msg_PICKSIDE_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_PICKSIDE_C2S* Msg_PICKSIDE_C2S::default_instance_ = NULL;

Msg_PICKSIDE_C2S* Msg_PICKSIDE_C2S::New() const {
  return new Msg_PICKSIDE_C2S;
}

void Msg_PICKSIDE_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    side_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_PICKSIDE_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 side = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));
          set_has_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_PICKSIDE_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 side = 1;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_PICKSIDE_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 side = 1;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_PICKSIDE_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 side = 1;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->side());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_PICKSIDE_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_PICKSIDE_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_PICKSIDE_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_PICKSIDE_C2S::MergeFrom(const Msg_PICKSIDE_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_PICKSIDE_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_PICKSIDE_C2S::CopyFrom(const Msg_PICKSIDE_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_PICKSIDE_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_PICKSIDE_C2S::Swap(Msg_PICKSIDE_C2S* other) {
  if (other != this) {
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_PICKSIDE_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_PICKSIDE_C2S_descriptor_;
  metadata.reflection = Msg_PICKSIDE_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_PICKSIDE_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_PICKSIDE_S2C::Msg_PICKSIDE_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_PICKSIDE_S2C::InitAsDefaultInstance() {
}

Msg_PICKSIDE_S2C::Msg_PICKSIDE_S2C(const Msg_PICKSIDE_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_PICKSIDE_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_PICKSIDE_S2C::~Msg_PICKSIDE_S2C() {
  SharedDtor();
}

void Msg_PICKSIDE_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_PICKSIDE_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_PICKSIDE_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_PICKSIDE_S2C_descriptor_;
}

const Msg_PICKSIDE_S2C& Msg_PICKSIDE_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_PICKSIDE_S2C* Msg_PICKSIDE_S2C::default_instance_ = NULL;

Msg_PICKSIDE_S2C* Msg_PICKSIDE_S2C::New() const {
  return new Msg_PICKSIDE_S2C;
}

void Msg_PICKSIDE_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_PICKSIDE_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_PICKSIDE_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_PICKSIDE_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_PICKSIDE_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_PICKSIDE_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_PICKSIDE_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_PICKSIDE_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_PICKSIDE_S2C::MergeFrom(const Msg_PICKSIDE_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_PICKSIDE_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_PICKSIDE_S2C::CopyFrom(const Msg_PICKSIDE_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_PICKSIDE_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_PICKSIDE_S2C::Swap(Msg_PICKSIDE_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_PICKSIDE_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_PICKSIDE_S2C_descriptor_;
  metadata.reflection = Msg_PICKSIDE_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_AMMO_C2S::kXFieldNumber;
const int Msg_AMMO_C2S::kYFieldNumber;
const int Msg_AMMO_C2S::kDirectionFieldNumber;
const int Msg_AMMO_C2S::kTypeFieldNumber;
const int Msg_AMMO_C2S::kIdShooterFieldNumber;
#endif  // !_MSC_VER

Msg_AMMO_C2S::Msg_AMMO_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_AMMO_C2S::InitAsDefaultInstance() {
}

Msg_AMMO_C2S::Msg_AMMO_C2S(const Msg_AMMO_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_AMMO_C2S::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  type_ = 0;
  id_shooter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_AMMO_C2S::~Msg_AMMO_C2S() {
  SharedDtor();
}

void Msg_AMMO_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_AMMO_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_AMMO_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_AMMO_C2S_descriptor_;
}

const Msg_AMMO_C2S& Msg_AMMO_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_AMMO_C2S* Msg_AMMO_C2S::default_instance_ = NULL;

Msg_AMMO_C2S* Msg_AMMO_C2S::New() const {
  return new Msg_AMMO_C2S;
}

void Msg_AMMO_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    type_ = 0;
    id_shooter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_AMMO_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_shooter;
        break;
      }

      // required int32 id_shooter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_shooter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_shooter_)));
          set_has_id_shooter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_AMMO_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 id_shooter = 5;
  if (has_id_shooter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id_shooter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_AMMO_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 id_shooter = 5;
  if (has_id_shooter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id_shooter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_AMMO_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id_shooter = 5;
    if (has_id_shooter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_shooter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_AMMO_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_AMMO_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_AMMO_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_AMMO_C2S::MergeFrom(const Msg_AMMO_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id_shooter()) {
      set_id_shooter(from.id_shooter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_AMMO_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AMMO_C2S::CopyFrom(const Msg_AMMO_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AMMO_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_AMMO_C2S::Swap(Msg_AMMO_C2S* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(type_, other->type_);
    std::swap(id_shooter_, other->id_shooter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_AMMO_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_AMMO_C2S_descriptor_;
  metadata.reflection = Msg_AMMO_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_AMMO_S2C::kXFieldNumber;
const int Msg_AMMO_S2C::kYFieldNumber;
const int Msg_AMMO_S2C::kDirectionFieldNumber;
const int Msg_AMMO_S2C::kTypeFieldNumber;
const int Msg_AMMO_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_AMMO_S2C::Msg_AMMO_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_AMMO_S2C::InitAsDefaultInstance() {
}

Msg_AMMO_S2C::Msg_AMMO_S2C(const Msg_AMMO_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_AMMO_S2C::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_AMMO_S2C::~Msg_AMMO_S2C() {
  SharedDtor();
}

void Msg_AMMO_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_AMMO_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_AMMO_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_AMMO_S2C_descriptor_;
}

const Msg_AMMO_S2C& Msg_AMMO_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_AMMO_S2C* Msg_AMMO_S2C::default_instance_ = NULL;

Msg_AMMO_S2C* Msg_AMMO_S2C::New() const {
  return new Msg_AMMO_S2C;
}

void Msg_AMMO_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_AMMO_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_AMMO_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_AMMO_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_AMMO_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_AMMO_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_AMMO_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_AMMO_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_AMMO_S2C::MergeFrom(const Msg_AMMO_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_AMMO_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AMMO_S2C::CopyFrom(const Msg_AMMO_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AMMO_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_AMMO_S2C::Swap(Msg_AMMO_S2C* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_AMMO_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_AMMO_S2C_descriptor_;
  metadata.reflection = Msg_AMMO_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_DAMAGE_C2S::kDamageFieldNumber;
const int Msg_DAMAGE_C2S::kIdHurtFieldNumber;
#endif  // !_MSC_VER

Msg_DAMAGE_C2S::Msg_DAMAGE_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_DAMAGE_C2S::InitAsDefaultInstance() {
}

Msg_DAMAGE_C2S::Msg_DAMAGE_C2S(const Msg_DAMAGE_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_DAMAGE_C2S::SharedCtor() {
  _cached_size_ = 0;
  damage_ = 0;
  id_hurt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_DAMAGE_C2S::~Msg_DAMAGE_C2S() {
  SharedDtor();
}

void Msg_DAMAGE_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_DAMAGE_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_DAMAGE_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_DAMAGE_C2S_descriptor_;
}

const Msg_DAMAGE_C2S& Msg_DAMAGE_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_DAMAGE_C2S* Msg_DAMAGE_C2S::default_instance_ = NULL;

Msg_DAMAGE_C2S* Msg_DAMAGE_C2S::New() const {
  return new Msg_DAMAGE_C2S;
}

void Msg_DAMAGE_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damage_ = 0;
    id_hurt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_DAMAGE_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 damage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_hurt;
        break;
      }

      // required int32 id_hurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_hurt_)));
          set_has_id_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_DAMAGE_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damage(), output);
  }

  // required int32 id_hurt = 2;
  if (has_id_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_hurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_DAMAGE_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damage(), target);
  }

  // required int32 id_hurt = 2;
  if (has_id_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_hurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_DAMAGE_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 id_hurt = 2;
    if (has_id_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_hurt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_DAMAGE_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_DAMAGE_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_DAMAGE_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_DAMAGE_C2S::MergeFrom(const Msg_DAMAGE_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_id_hurt()) {
      set_id_hurt(from.id_hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_DAMAGE_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_DAMAGE_C2S::CopyFrom(const Msg_DAMAGE_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DAMAGE_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_DAMAGE_C2S::Swap(Msg_DAMAGE_C2S* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    std::swap(id_hurt_, other->id_hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_DAMAGE_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_DAMAGE_C2S_descriptor_;
  metadata.reflection = Msg_DAMAGE_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_DAMAGE_S2C::kDamageFieldNumber;
const int Msg_DAMAGE_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_DAMAGE_S2C::Msg_DAMAGE_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_DAMAGE_S2C::InitAsDefaultInstance() {
}

Msg_DAMAGE_S2C::Msg_DAMAGE_S2C(const Msg_DAMAGE_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_DAMAGE_S2C::SharedCtor() {
  _cached_size_ = 0;
  damage_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_DAMAGE_S2C::~Msg_DAMAGE_S2C() {
  SharedDtor();
}

void Msg_DAMAGE_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_DAMAGE_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_DAMAGE_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_DAMAGE_S2C_descriptor_;
}

const Msg_DAMAGE_S2C& Msg_DAMAGE_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_DAMAGE_S2C* Msg_DAMAGE_S2C::default_instance_ = NULL;

Msg_DAMAGE_S2C* Msg_DAMAGE_S2C::New() const {
  return new Msg_DAMAGE_S2C;
}

void Msg_DAMAGE_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damage_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_DAMAGE_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 damage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_DAMAGE_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damage(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_DAMAGE_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damage(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_DAMAGE_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_DAMAGE_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_DAMAGE_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_DAMAGE_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_DAMAGE_S2C::MergeFrom(const Msg_DAMAGE_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_DAMAGE_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_DAMAGE_S2C::CopyFrom(const Msg_DAMAGE_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DAMAGE_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_DAMAGE_S2C::Swap(Msg_DAMAGE_S2C* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_DAMAGE_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_DAMAGE_S2C_descriptor_;
  metadata.reflection = Msg_DAMAGE_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GETITEM_S2C::kKindFieldNumber;
const int Msg_GETITEM_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_GETITEM_S2C::Msg_GETITEM_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GETITEM_S2C::InitAsDefaultInstance() {
}

Msg_GETITEM_S2C::Msg_GETITEM_S2C(const Msg_GETITEM_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GETITEM_S2C::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GETITEM_S2C::~Msg_GETITEM_S2C() {
  SharedDtor();
}

void Msg_GETITEM_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_GETITEM_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GETITEM_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GETITEM_S2C_descriptor_;
}

const Msg_GETITEM_S2C& Msg_GETITEM_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_GETITEM_S2C* Msg_GETITEM_S2C::default_instance_ = NULL;

Msg_GETITEM_S2C* Msg_GETITEM_S2C::New() const {
  return new Msg_GETITEM_S2C;
}

void Msg_GETITEM_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GETITEM_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GETITEM_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GETITEM_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GETITEM_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GETITEM_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GETITEM_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GETITEM_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GETITEM_S2C::MergeFrom(const Msg_GETITEM_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GETITEM_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GETITEM_S2C::CopyFrom(const Msg_GETITEM_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GETITEM_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_GETITEM_S2C::Swap(Msg_GETITEM_S2C* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GETITEM_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GETITEM_S2C_descriptor_;
  metadata.reflection = Msg_GETITEM_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_DEATH_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_DEATH_S2C::Msg_DEATH_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_DEATH_S2C::InitAsDefaultInstance() {
}

Msg_DEATH_S2C::Msg_DEATH_S2C(const Msg_DEATH_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_DEATH_S2C::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_DEATH_S2C::~Msg_DEATH_S2C() {
  SharedDtor();
}

void Msg_DEATH_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_DEATH_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_DEATH_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_DEATH_S2C_descriptor_;
}

const Msg_DEATH_S2C& Msg_DEATH_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_DEATH_S2C* Msg_DEATH_S2C::default_instance_ = NULL;

Msg_DEATH_S2C* Msg_DEATH_S2C::New() const {
  return new Msg_DEATH_S2C;
}

void Msg_DEATH_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_DEATH_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_DEATH_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_DEATH_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_DEATH_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_DEATH_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_DEATH_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_DEATH_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_DEATH_S2C::MergeFrom(const Msg_DEATH_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_DEATH_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_DEATH_S2C::CopyFrom(const Msg_DEATH_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DEATH_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_DEATH_S2C::Swap(Msg_DEATH_S2C* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_DEATH_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_DEATH_S2C_descriptor_;
  metadata.reflection = Msg_DEATH_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_POINTTAKING_S2C::kTeamFieldNumber;
const int Msg_POINTTAKING_S2C::kPercentFieldNumber;
#endif  // !_MSC_VER

Msg_POINTTAKING_S2C::Msg_POINTTAKING_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_POINTTAKING_S2C::InitAsDefaultInstance() {
}

Msg_POINTTAKING_S2C::Msg_POINTTAKING_S2C(const Msg_POINTTAKING_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_POINTTAKING_S2C::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_POINTTAKING_S2C::~Msg_POINTTAKING_S2C() {
  SharedDtor();
}

void Msg_POINTTAKING_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_POINTTAKING_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_POINTTAKING_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_POINTTAKING_S2C_descriptor_;
}

const Msg_POINTTAKING_S2C& Msg_POINTTAKING_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_POINTTAKING_S2C* Msg_POINTTAKING_S2C::default_instance_ = NULL;

Msg_POINTTAKING_S2C* Msg_POINTTAKING_S2C::New() const {
  return new Msg_POINTTAKING_S2C;
}

void Msg_POINTTAKING_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_POINTTAKING_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_percent;
        break;
      }

      // required int32 percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_POINTTAKING_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // required int32 percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_POINTTAKING_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // required int32 percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_POINTTAKING_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // required int32 percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_POINTTAKING_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_POINTTAKING_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_POINTTAKING_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_POINTTAKING_S2C::MergeFrom(const Msg_POINTTAKING_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_POINTTAKING_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_POINTTAKING_S2C::CopyFrom(const Msg_POINTTAKING_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_POINTTAKING_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_POINTTAKING_S2C::Swap(Msg_POINTTAKING_S2C* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_POINTTAKING_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_POINTTAKING_S2C_descriptor_;
  metadata.reflection = Msg_POINTTAKING_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_POINTTAKEN_S2C::kTeamFieldNumber;
const int Msg_POINTTAKEN_S2C::kPointnumberFieldNumber;
#endif  // !_MSC_VER

Msg_POINTTAKEN_S2C::Msg_POINTTAKEN_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_POINTTAKEN_S2C::InitAsDefaultInstance() {
}

Msg_POINTTAKEN_S2C::Msg_POINTTAKEN_S2C(const Msg_POINTTAKEN_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_POINTTAKEN_S2C::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
  pointnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_POINTTAKEN_S2C::~Msg_POINTTAKEN_S2C() {
  SharedDtor();
}

void Msg_POINTTAKEN_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_POINTTAKEN_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_POINTTAKEN_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_POINTTAKEN_S2C_descriptor_;
}

const Msg_POINTTAKEN_S2C& Msg_POINTTAKEN_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_POINTTAKEN_S2C* Msg_POINTTAKEN_S2C::default_instance_ = NULL;

Msg_POINTTAKEN_S2C* Msg_POINTTAKEN_S2C::New() const {
  return new Msg_POINTTAKEN_S2C;
}

void Msg_POINTTAKEN_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_ = 0;
    pointnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_POINTTAKEN_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointnumber;
        break;
      }

      // required int32 pointnumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointnumber_)));
          set_has_pointnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_POINTTAKEN_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team(), output);
  }

  // required int32 pointnumber = 2;
  if (has_pointnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_POINTTAKEN_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team(), target);
  }

  // required int32 pointnumber = 2;
  if (has_pointnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pointnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_POINTTAKEN_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // required int32 pointnumber = 2;
    if (has_pointnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_POINTTAKEN_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_POINTTAKEN_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_POINTTAKEN_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_POINTTAKEN_S2C::MergeFrom(const Msg_POINTTAKEN_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_pointnumber()) {
      set_pointnumber(from.pointnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_POINTTAKEN_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_POINTTAKEN_S2C::CopyFrom(const Msg_POINTTAKEN_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_POINTTAKEN_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_POINTTAKEN_S2C::Swap(Msg_POINTTAKEN_S2C* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(pointnumber_, other->pointnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_POINTTAKEN_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_POINTTAKEN_S2C_descriptor_;
  metadata.reflection = Msg_POINTTAKEN_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ADDSCORES_S2C::kSocresFieldNumber;
const int Msg_ADDSCORES_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_ADDSCORES_S2C::Msg_ADDSCORES_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ADDSCORES_S2C::InitAsDefaultInstance() {
}

Msg_ADDSCORES_S2C::Msg_ADDSCORES_S2C(const Msg_ADDSCORES_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ADDSCORES_S2C::SharedCtor() {
  _cached_size_ = 0;
  socres_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ADDSCORES_S2C::~Msg_ADDSCORES_S2C() {
  SharedDtor();
}

void Msg_ADDSCORES_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ADDSCORES_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ADDSCORES_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ADDSCORES_S2C_descriptor_;
}

const Msg_ADDSCORES_S2C& Msg_ADDSCORES_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ADDSCORES_S2C* Msg_ADDSCORES_S2C::default_instance_ = NULL;

Msg_ADDSCORES_S2C* Msg_ADDSCORES_S2C::New() const {
  return new Msg_ADDSCORES_S2C;
}

void Msg_ADDSCORES_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    socres_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ADDSCORES_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 socres = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socres_)));
          set_has_socres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ADDSCORES_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 socres = 1;
  if (has_socres()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->socres(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ADDSCORES_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 socres = 1;
  if (has_socres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->socres(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ADDSCORES_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 socres = 1;
    if (has_socres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socres());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ADDSCORES_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ADDSCORES_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ADDSCORES_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ADDSCORES_S2C::MergeFrom(const Msg_ADDSCORES_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socres()) {
      set_socres(from.socres());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ADDSCORES_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ADDSCORES_S2C::CopyFrom(const Msg_ADDSCORES_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ADDSCORES_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_ADDSCORES_S2C::Swap(Msg_ADDSCORES_S2C* other) {
  if (other != this) {
    std::swap(socres_, other->socres_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ADDSCORES_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ADDSCORES_S2C_descriptor_;
  metadata.reflection = Msg_ADDSCORES_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ENDGAME_S2C::kResultFieldNumber;
const int Msg_ENDGAME_S2C::kTeamFieldNumber;
#endif  // !_MSC_VER

Msg_ENDGAME_S2C::Msg_ENDGAME_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ENDGAME_S2C::InitAsDefaultInstance() {
}

Msg_ENDGAME_S2C::Msg_ENDGAME_S2C(const Msg_ENDGAME_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ENDGAME_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ENDGAME_S2C::~Msg_ENDGAME_S2C() {
  SharedDtor();
}

void Msg_ENDGAME_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ENDGAME_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ENDGAME_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ENDGAME_S2C_descriptor_;
}

const Msg_ENDGAME_S2C& Msg_ENDGAME_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ENDGAME_S2C* Msg_ENDGAME_S2C::default_instance_ = NULL;

Msg_ENDGAME_S2C* Msg_ENDGAME_S2C::New() const {
  return new Msg_ENDGAME_S2C;
}

void Msg_ENDGAME_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ENDGAME_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ENDGAME_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ENDGAME_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ENDGAME_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ENDGAME_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ENDGAME_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ENDGAME_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ENDGAME_S2C::MergeFrom(const Msg_ENDGAME_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ENDGAME_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ENDGAME_S2C::CopyFrom(const Msg_ENDGAME_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ENDGAME_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_ENDGAME_S2C::Swap(Msg_ENDGAME_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ENDGAME_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ENDGAME_S2C_descriptor_;
  metadata.reflection = Msg_ENDGAME_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_POINTDESPUTE_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_POINTDESPUTE_S2C::Msg_POINTDESPUTE_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_POINTDESPUTE_S2C::InitAsDefaultInstance() {
}

Msg_POINTDESPUTE_S2C::Msg_POINTDESPUTE_S2C(const Msg_POINTDESPUTE_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_POINTDESPUTE_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_POINTDESPUTE_S2C::~Msg_POINTDESPUTE_S2C() {
  SharedDtor();
}

void Msg_POINTDESPUTE_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_POINTDESPUTE_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_POINTDESPUTE_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_POINTDESPUTE_S2C_descriptor_;
}

const Msg_POINTDESPUTE_S2C& Msg_POINTDESPUTE_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_POINTDESPUTE_S2C* Msg_POINTDESPUTE_S2C::default_instance_ = NULL;

Msg_POINTDESPUTE_S2C* Msg_POINTDESPUTE_S2C::New() const {
  return new Msg_POINTDESPUTE_S2C;
}

void Msg_POINTDESPUTE_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_POINTDESPUTE_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_POINTDESPUTE_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_POINTDESPUTE_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_POINTDESPUTE_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_POINTDESPUTE_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_POINTDESPUTE_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_POINTDESPUTE_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_POINTDESPUTE_S2C::MergeFrom(const Msg_POINTDESPUTE_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_POINTDESPUTE_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_POINTDESPUTE_S2C::CopyFrom(const Msg_POINTDESPUTE_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_POINTDESPUTE_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_POINTDESPUTE_S2C::Swap(Msg_POINTDESPUTE_S2C* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_POINTDESPUTE_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_POINTDESPUTE_S2C_descriptor_;
  metadata.reflection = Msg_POINTDESPUTE_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ROOMINFO_S2C::kMasteridFieldNumber;
const int Msg_ROOMINFO_S2C::kMasterusernameFieldNumber;
const int Msg_ROOMINFO_S2C::kRoomidFieldNumber;
#endif  // !_MSC_VER

Msg_ROOMINFO_S2C::Msg_ROOMINFO_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ROOMINFO_S2C::InitAsDefaultInstance() {
}

Msg_ROOMINFO_S2C::Msg_ROOMINFO_S2C(const Msg_ROOMINFO_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ROOMINFO_S2C::SharedCtor() {
  _cached_size_ = 0;
  masterid_ = 0;
  masterusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ROOMINFO_S2C::~Msg_ROOMINFO_S2C() {
  SharedDtor();
}

void Msg_ROOMINFO_S2C::SharedDtor() {
  if (masterusername_ != &::google::protobuf::internal::kEmptyString) {
    delete masterusername_;
  }
  if (this != default_instance_) {
  }
}

void Msg_ROOMINFO_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ROOMINFO_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ROOMINFO_S2C_descriptor_;
}

const Msg_ROOMINFO_S2C& Msg_ROOMINFO_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ROOMINFO_S2C* Msg_ROOMINFO_S2C::default_instance_ = NULL;

Msg_ROOMINFO_S2C* Msg_ROOMINFO_S2C::New() const {
  return new Msg_ROOMINFO_S2C;
}

void Msg_ROOMINFO_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    masterid_ = 0;
    if (has_masterusername()) {
      if (masterusername_ != &::google::protobuf::internal::kEmptyString) {
        masterusername_->clear();
      }
    }
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ROOMINFO_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 masterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masterusername;
        break;
      }

      // required bytes masterusername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterusername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_masterusername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // required int32 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ROOMINFO_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 masterid = 1;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->masterid(), output);
  }

  // required bytes masterusername = 2;
  if (has_masterusername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->masterusername(), output);
  }

  // required int32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ROOMINFO_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 masterid = 1;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->masterid(), target);
  }

  // required bytes masterusername = 2;
  if (has_masterusername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->masterusername(), target);
  }

  // required int32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ROOMINFO_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 masterid = 1;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->masterid());
    }

    // required bytes masterusername = 2;
    if (has_masterusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->masterusername());
    }

    // required int32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ROOMINFO_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ROOMINFO_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ROOMINFO_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ROOMINFO_S2C::MergeFrom(const Msg_ROOMINFO_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_masterusername()) {
      set_masterusername(from.masterusername());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ROOMINFO_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ROOMINFO_S2C::CopyFrom(const Msg_ROOMINFO_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ROOMINFO_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_ROOMINFO_S2C::Swap(Msg_ROOMINFO_S2C* other) {
  if (other != this) {
    std::swap(masterid_, other->masterid_);
    std::swap(masterusername_, other->masterusername_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ROOMINFO_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ROOMINFO_S2C_descriptor_;
  metadata.reflection = Msg_ROOMINFO_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ROOMLIST_S2C::kRoomFieldNumber;
const int Msg_ROOMLIST_S2C::kResultFieldNumber;
#endif  // !_MSC_VER

Msg_ROOMLIST_S2C::Msg_ROOMLIST_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ROOMLIST_S2C::InitAsDefaultInstance() {
}

Msg_ROOMLIST_S2C::Msg_ROOMLIST_S2C(const Msg_ROOMLIST_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ROOMLIST_S2C::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ROOMLIST_S2C::~Msg_ROOMLIST_S2C() {
  SharedDtor();
}

void Msg_ROOMLIST_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ROOMLIST_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ROOMLIST_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ROOMLIST_S2C_descriptor_;
}

const Msg_ROOMLIST_S2C& Msg_ROOMLIST_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ROOMLIST_S2C* Msg_ROOMLIST_S2C::default_instance_ = NULL;

Msg_ROOMLIST_S2C* Msg_ROOMLIST_S2C::New() const {
  return new Msg_ROOMLIST_S2C;
}

void Msg_ROOMLIST_S2C::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
  }
  room_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ROOMLIST_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Msg_ROOMINFO_S2C room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_room;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ROOMLIST_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Msg_ROOMINFO_S2C room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(i), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ROOMLIST_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Msg_ROOMINFO_S2C room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(i), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ROOMLIST_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .Msg_ROOMINFO_S2C room = 1;
  total_size += 1 * this->room_size();
  for (int i = 0; i < this->room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ROOMLIST_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ROOMLIST_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ROOMLIST_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ROOMLIST_S2C::MergeFrom(const Msg_ROOMLIST_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_.MergeFrom(from.room_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ROOMLIST_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ROOMLIST_S2C::CopyFrom(const Msg_ROOMLIST_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ROOMLIST_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < room_size(); i++) {
    if (!this->room(i).IsInitialized()) return false;
  }
  return true;
}

void Msg_ROOMLIST_S2C::Swap(Msg_ROOMLIST_S2C* other) {
  if (other != this) {
    room_.Swap(&other->room_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ROOMLIST_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ROOMLIST_S2C_descriptor_;
  metadata.reflection = Msg_ROOMLIST_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ROOMINFOREQUEST_C2S::kIdFieldNumber;
#endif  // !_MSC_VER

Msg_ROOMINFOREQUEST_C2S::Msg_ROOMINFOREQUEST_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ROOMINFOREQUEST_C2S::InitAsDefaultInstance() {
}

Msg_ROOMINFOREQUEST_C2S::Msg_ROOMINFOREQUEST_C2S(const Msg_ROOMINFOREQUEST_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ROOMINFOREQUEST_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ROOMINFOREQUEST_C2S::~Msg_ROOMINFOREQUEST_C2S() {
  SharedDtor();
}

void Msg_ROOMINFOREQUEST_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ROOMINFOREQUEST_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ROOMINFOREQUEST_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ROOMINFOREQUEST_C2S_descriptor_;
}

const Msg_ROOMINFOREQUEST_C2S& Msg_ROOMINFOREQUEST_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_ROOMINFOREQUEST_C2S* Msg_ROOMINFOREQUEST_C2S::default_instance_ = NULL;

Msg_ROOMINFOREQUEST_C2S* Msg_ROOMINFOREQUEST_C2S::New() const {
  return new Msg_ROOMINFOREQUEST_C2S;
}

void Msg_ROOMINFOREQUEST_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ROOMINFOREQUEST_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ROOMINFOREQUEST_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ROOMINFOREQUEST_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ROOMINFOREQUEST_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ROOMINFOREQUEST_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ROOMINFOREQUEST_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ROOMINFOREQUEST_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ROOMINFOREQUEST_C2S::MergeFrom(const Msg_ROOMINFOREQUEST_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ROOMINFOREQUEST_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ROOMINFOREQUEST_C2S::CopyFrom(const Msg_ROOMINFOREQUEST_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ROOMINFOREQUEST_C2S::IsInitialized() const {

  return true;
}

void Msg_ROOMINFOREQUEST_C2S::Swap(Msg_ROOMINFOREQUEST_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ROOMINFOREQUEST_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ROOMINFOREQUEST_C2S_descriptor_;
  metadata.reflection = Msg_ROOMINFOREQUEST_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_USERINFO_S2C::kIdFieldNumber;
const int Msg_USERINFO_S2C::kUsernameFieldNumber;
const int Msg_USERINFO_S2C::kHpFieldNumber;
const int Msg_USERINFO_S2C::kTypeFieldNumber;
const int Msg_USERINFO_S2C::kTeamFieldNumber;
#endif  // !_MSC_VER

Msg_USERINFO_S2C::Msg_USERINFO_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_USERINFO_S2C::InitAsDefaultInstance() {
}

Msg_USERINFO_S2C::Msg_USERINFO_S2C(const Msg_USERINFO_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_USERINFO_S2C::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  type_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_USERINFO_S2C::~Msg_USERINFO_S2C() {
  SharedDtor();
}

void Msg_USERINFO_S2C::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Msg_USERINFO_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_USERINFO_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_USERINFO_S2C_descriptor_;
}

const Msg_USERINFO_S2C& Msg_USERINFO_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_USERINFO_S2C* Msg_USERINFO_S2C::default_instance_ = NULL;

Msg_USERINFO_S2C* Msg_USERINFO_S2C::New() const {
  return new Msg_USERINFO_S2C;
}

void Msg_USERINFO_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    hp_ = 0;
    type_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_USERINFO_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team;
        break;
      }

      // required int32 team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_USERINFO_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 team = 5;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_USERINFO_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 team = 5;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_USERINFO_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 team = 5;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_USERINFO_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_USERINFO_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_USERINFO_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_USERINFO_S2C::MergeFrom(const Msg_USERINFO_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_USERINFO_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_USERINFO_S2C::CopyFrom(const Msg_USERINFO_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_USERINFO_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_USERINFO_S2C::Swap(Msg_USERINFO_S2C* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(hp_, other->hp_);
    std::swap(type_, other->type_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_USERINFO_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_USERINFO_S2C_descriptor_;
  metadata.reflection = Msg_USERINFO_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_USERINFOLISTOS_S2C::kUserinfoFieldNumber;
#endif  // !_MSC_VER

MSG_USERINFOLISTOS_S2C::MSG_USERINFOLISTOS_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_USERINFOLISTOS_S2C::InitAsDefaultInstance() {
}

MSG_USERINFOLISTOS_S2C::MSG_USERINFOLISTOS_S2C(const MSG_USERINFOLISTOS_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_USERINFOLISTOS_S2C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_USERINFOLISTOS_S2C::~MSG_USERINFOLISTOS_S2C() {
  SharedDtor();
}

void MSG_USERINFOLISTOS_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_USERINFOLISTOS_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_USERINFOLISTOS_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_USERINFOLISTOS_S2C_descriptor_;
}

const MSG_USERINFOLISTOS_S2C& MSG_USERINFOLISTOS_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

MSG_USERINFOLISTOS_S2C* MSG_USERINFOLISTOS_S2C::default_instance_ = NULL;

MSG_USERINFOLISTOS_S2C* MSG_USERINFOLISTOS_S2C::New() const {
  return new MSG_USERINFOLISTOS_S2C;
}

void MSG_USERINFOLISTOS_S2C::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_USERINFOLISTOS_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Msg_USERINFO_S2C userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_USERINFOLISTOS_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Msg_USERINFO_S2C userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_USERINFOLISTOS_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Msg_USERINFO_S2C userinfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_USERINFOLISTOS_S2C::ByteSize() const {
  int total_size = 0;

  // repeated .Msg_USERINFO_S2C userinfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_USERINFOLISTOS_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_USERINFOLISTOS_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_USERINFOLISTOS_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_USERINFOLISTOS_S2C::MergeFrom(const MSG_USERINFOLISTOS_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_USERINFOLISTOS_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_USERINFOLISTOS_S2C::CopyFrom(const MSG_USERINFOLISTOS_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_USERINFOLISTOS_S2C::IsInitialized() const {

  for (int i = 0; i < userinfo_size(); i++) {
    if (!this->userinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MSG_USERINFOLISTOS_S2C::Swap(MSG_USERINFOLISTOS_S2C* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_USERINFOLISTOS_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_USERINFOLISTOS_S2C_descriptor_;
  metadata.reflection = MSG_USERINFOLISTOS_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_VECOS_S2C::kXFieldNumber;
const int MSG_VECOS_S2C::kYFieldNumber;
const int MSG_VECOS_S2C::kDirectionFieldNumber;
const int MSG_VECOS_S2C::kIngrassFieldNumber;
const int MSG_VECOS_S2C::kIdFieldNumber;
#endif  // !_MSC_VER

MSG_VECOS_S2C::MSG_VECOS_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_VECOS_S2C::InitAsDefaultInstance() {
}

MSG_VECOS_S2C::MSG_VECOS_S2C(const MSG_VECOS_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_VECOS_S2C::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  direction_ = 0;
  ingrass_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_VECOS_S2C::~MSG_VECOS_S2C() {
  SharedDtor();
}

void MSG_VECOS_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_VECOS_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_VECOS_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_VECOS_S2C_descriptor_;
}

const MSG_VECOS_S2C& MSG_VECOS_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

MSG_VECOS_S2C* MSG_VECOS_S2C::default_instance_ = NULL;

MSG_VECOS_S2C* MSG_VECOS_S2C::New() const {
  return new MSG_VECOS_S2C;
}

void MSG_VECOS_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    direction_ = 0;
    ingrass_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_VECOS_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ingrass;
        break;
      }

      // required int32 ingrass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingrass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ingrass_)));
          set_has_ingrass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_VECOS_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 ingrass = 4;
  if (has_ingrass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ingrass(), output);
  }

  // required int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_VECOS_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 ingrass = 4;
  if (has_ingrass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ingrass(), target);
  }

  // required int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_VECOS_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // required int32 ingrass = 4;
    if (has_ingrass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ingrass());
    }

    // required int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_VECOS_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_VECOS_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_VECOS_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_VECOS_S2C::MergeFrom(const MSG_VECOS_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_ingrass()) {
      set_ingrass(from.ingrass());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_VECOS_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_VECOS_S2C::CopyFrom(const MSG_VECOS_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_VECOS_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MSG_VECOS_S2C::Swap(MSG_VECOS_S2C* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(direction_, other->direction_);
    std::swap(ingrass_, other->ingrass_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_VECOS_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_VECOS_S2C_descriptor_;
  metadata.reflection = MSG_VECOS_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_VECOSLIST_S2C::kVecFieldNumber;
#endif  // !_MSC_VER

MSG_VECOSLIST_S2C::MSG_VECOSLIST_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_VECOSLIST_S2C::InitAsDefaultInstance() {
}

MSG_VECOSLIST_S2C::MSG_VECOSLIST_S2C(const MSG_VECOSLIST_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_VECOSLIST_S2C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_VECOSLIST_S2C::~MSG_VECOSLIST_S2C() {
  SharedDtor();
}

void MSG_VECOSLIST_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_VECOSLIST_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_VECOSLIST_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_VECOSLIST_S2C_descriptor_;
}

const MSG_VECOSLIST_S2C& MSG_VECOSLIST_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

MSG_VECOSLIST_S2C* MSG_VECOSLIST_S2C::default_instance_ = NULL;

MSG_VECOSLIST_S2C* MSG_VECOSLIST_S2C::New() const {
  return new MSG_VECOSLIST_S2C;
}

void MSG_VECOSLIST_S2C::Clear() {
  vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_VECOSLIST_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MSG_VECOS_S2C vec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_VECOSLIST_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MSG_VECOS_S2C vec = 1;
  for (int i = 0; i < this->vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_VECOSLIST_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MSG_VECOS_S2C vec = 1;
  for (int i = 0; i < this->vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_VECOSLIST_S2C::ByteSize() const {
  int total_size = 0;

  // repeated .MSG_VECOS_S2C vec = 1;
  total_size += 1 * this->vec_size();
  for (int i = 0; i < this->vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_VECOSLIST_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_VECOSLIST_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_VECOSLIST_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_VECOSLIST_S2C::MergeFrom(const MSG_VECOSLIST_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  vec_.MergeFrom(from.vec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_VECOSLIST_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_VECOSLIST_S2C::CopyFrom(const MSG_VECOSLIST_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_VECOSLIST_S2C::IsInitialized() const {

  for (int i = 0; i < vec_size(); i++) {
    if (!this->vec(i).IsInitialized()) return false;
  }
  return true;
}

void MSG_VECOSLIST_S2C::Swap(MSG_VECOSLIST_S2C* other) {
  if (other != this) {
    vec_.Swap(&other->vec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_VECOSLIST_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_VECOSLIST_S2C_descriptor_;
  metadata.reflection = MSG_VECOSLIST_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_INFOAC_C2S::kResultFieldNumber;
#endif  // !_MSC_VER

MSG_INFOAC_C2S::MSG_INFOAC_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_INFOAC_C2S::InitAsDefaultInstance() {
}

MSG_INFOAC_C2S::MSG_INFOAC_C2S(const MSG_INFOAC_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_INFOAC_C2S::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_INFOAC_C2S::~MSG_INFOAC_C2S() {
  SharedDtor();
}

void MSG_INFOAC_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_INFOAC_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_INFOAC_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_INFOAC_C2S_descriptor_;
}

const MSG_INFOAC_C2S& MSG_INFOAC_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

MSG_INFOAC_C2S* MSG_INFOAC_C2S::default_instance_ = NULL;

MSG_INFOAC_C2S* MSG_INFOAC_C2S::New() const {
  return new MSG_INFOAC_C2S;
}

void MSG_INFOAC_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_INFOAC_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_INFOAC_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_INFOAC_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_INFOAC_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_INFOAC_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_INFOAC_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_INFOAC_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_INFOAC_C2S::MergeFrom(const MSG_INFOAC_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_INFOAC_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_INFOAC_C2S::CopyFrom(const MSG_INFOAC_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_INFOAC_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MSG_INFOAC_C2S::Swap(MSG_INFOAC_C2S* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_INFOAC_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_INFOAC_C2S_descriptor_;
  metadata.reflection = MSG_INFOAC_C2S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
